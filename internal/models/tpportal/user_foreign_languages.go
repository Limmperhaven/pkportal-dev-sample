// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package tpportal

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserForeignLanguage is an object representing the database table.
type UserForeignLanguage struct {
	UserID            int64      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	UserEducationYear int16      `boil:"user_education_year" json:"user_education_year" toml:"user_education_year" yaml:"user_education_year"`
	ForeignLanguageID null.Int64 `boil:"foreign_language_id" json:"foreign_language_id,omitempty" toml:"foreign_language_id" yaml:"foreign_language_id,omitempty"`

	R *userForeignLanguageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userForeignLanguageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserForeignLanguageColumns = struct {
	UserID            string
	UserEducationYear string
	ForeignLanguageID string
}{
	UserID:            "user_id",
	UserEducationYear: "user_education_year",
	ForeignLanguageID: "foreign_language_id",
}

var UserForeignLanguageTableColumns = struct {
	UserID            string
	UserEducationYear string
	ForeignLanguageID string
}{
	UserID:            "user_foreign_languages.user_id",
	UserEducationYear: "user_foreign_languages.user_education_year",
	ForeignLanguageID: "user_foreign_languages.foreign_language_id",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var UserForeignLanguageWhere = struct {
	UserID            whereHelperint64
	UserEducationYear whereHelperint16
	ForeignLanguageID whereHelpernull_Int64
}{
	UserID:            whereHelperint64{field: "\"user_foreign_languages\".\"user_id\""},
	UserEducationYear: whereHelperint16{field: "\"user_foreign_languages\".\"user_education_year\""},
	ForeignLanguageID: whereHelpernull_Int64{field: "\"user_foreign_languages\".\"foreign_language_id\""},
}

// UserForeignLanguageRels is where relationship names are stored.
var UserForeignLanguageRels = struct {
	ForeignLanguage string
	User            string
}{
	ForeignLanguage: "ForeignLanguage",
	User:            "User",
}

// userForeignLanguageR is where relationships are stored.
type userForeignLanguageR struct {
	ForeignLanguage *ForeignLanguage `boil:"ForeignLanguage" json:"ForeignLanguage" toml:"ForeignLanguage" yaml:"ForeignLanguage"`
	User            *User            `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userForeignLanguageR) NewStruct() *userForeignLanguageR {
	return &userForeignLanguageR{}
}

func (r *userForeignLanguageR) GetForeignLanguage() *ForeignLanguage {
	if r == nil {
		return nil
	}
	return r.ForeignLanguage
}

func (r *userForeignLanguageR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userForeignLanguageL is where Load methods for each relationship are stored.
type userForeignLanguageL struct{}

var (
	userForeignLanguageAllColumns            = []string{"user_id", "user_education_year", "foreign_language_id"}
	userForeignLanguageColumnsWithoutDefault = []string{"user_id", "user_education_year"}
	userForeignLanguageColumnsWithDefault    = []string{"foreign_language_id"}
	userForeignLanguagePrimaryKeyColumns     = []string{"user_id", "user_education_year"}
	userForeignLanguageGeneratedColumns      = []string{}
)

type (
	// UserForeignLanguageSlice is an alias for a slice of pointers to UserForeignLanguage.
	// This should almost always be used instead of []UserForeignLanguage.
	UserForeignLanguageSlice []*UserForeignLanguage
	// UserForeignLanguageHook is the signature for custom UserForeignLanguage hook methods
	UserForeignLanguageHook func(context.Context, boil.ContextExecutor, *UserForeignLanguage) error

	userForeignLanguageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userForeignLanguageType                 = reflect.TypeOf(&UserForeignLanguage{})
	userForeignLanguageMapping              = queries.MakeStructMapping(userForeignLanguageType)
	userForeignLanguagePrimaryKeyMapping, _ = queries.BindMapping(userForeignLanguageType, userForeignLanguageMapping, userForeignLanguagePrimaryKeyColumns)
	userForeignLanguageInsertCacheMut       sync.RWMutex
	userForeignLanguageInsertCache          = make(map[string]insertCache)
	userForeignLanguageUpdateCacheMut       sync.RWMutex
	userForeignLanguageUpdateCache          = make(map[string]updateCache)
	userForeignLanguageUpsertCacheMut       sync.RWMutex
	userForeignLanguageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userForeignLanguageAfterSelectHooks []UserForeignLanguageHook

var userForeignLanguageBeforeInsertHooks []UserForeignLanguageHook
var userForeignLanguageAfterInsertHooks []UserForeignLanguageHook

var userForeignLanguageBeforeUpdateHooks []UserForeignLanguageHook
var userForeignLanguageAfterUpdateHooks []UserForeignLanguageHook

var userForeignLanguageBeforeDeleteHooks []UserForeignLanguageHook
var userForeignLanguageAfterDeleteHooks []UserForeignLanguageHook

var userForeignLanguageBeforeUpsertHooks []UserForeignLanguageHook
var userForeignLanguageAfterUpsertHooks []UserForeignLanguageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserForeignLanguage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userForeignLanguageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserForeignLanguage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userForeignLanguageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserForeignLanguage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userForeignLanguageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserForeignLanguage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userForeignLanguageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserForeignLanguage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userForeignLanguageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserForeignLanguage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userForeignLanguageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserForeignLanguage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userForeignLanguageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserForeignLanguage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userForeignLanguageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserForeignLanguage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userForeignLanguageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserForeignLanguageHook registers your hook function for all future operations.
func AddUserForeignLanguageHook(hookPoint boil.HookPoint, userForeignLanguageHook UserForeignLanguageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userForeignLanguageAfterSelectHooks = append(userForeignLanguageAfterSelectHooks, userForeignLanguageHook)
	case boil.BeforeInsertHook:
		userForeignLanguageBeforeInsertHooks = append(userForeignLanguageBeforeInsertHooks, userForeignLanguageHook)
	case boil.AfterInsertHook:
		userForeignLanguageAfterInsertHooks = append(userForeignLanguageAfterInsertHooks, userForeignLanguageHook)
	case boil.BeforeUpdateHook:
		userForeignLanguageBeforeUpdateHooks = append(userForeignLanguageBeforeUpdateHooks, userForeignLanguageHook)
	case boil.AfterUpdateHook:
		userForeignLanguageAfterUpdateHooks = append(userForeignLanguageAfterUpdateHooks, userForeignLanguageHook)
	case boil.BeforeDeleteHook:
		userForeignLanguageBeforeDeleteHooks = append(userForeignLanguageBeforeDeleteHooks, userForeignLanguageHook)
	case boil.AfterDeleteHook:
		userForeignLanguageAfterDeleteHooks = append(userForeignLanguageAfterDeleteHooks, userForeignLanguageHook)
	case boil.BeforeUpsertHook:
		userForeignLanguageBeforeUpsertHooks = append(userForeignLanguageBeforeUpsertHooks, userForeignLanguageHook)
	case boil.AfterUpsertHook:
		userForeignLanguageAfterUpsertHooks = append(userForeignLanguageAfterUpsertHooks, userForeignLanguageHook)
	}
}

// One returns a single userForeignLanguage record from the query.
func (q userForeignLanguageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserForeignLanguage, error) {
	o := &UserForeignLanguage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "tpportal: failed to execute a one query for user_foreign_languages")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserForeignLanguage records from the query.
func (q userForeignLanguageQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserForeignLanguageSlice, error) {
	var o []*UserForeignLanguage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "tpportal: failed to assign all query results to UserForeignLanguage slice")
	}

	if len(userForeignLanguageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserForeignLanguage records in the query.
func (q userForeignLanguageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to count user_foreign_languages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userForeignLanguageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "tpportal: failed to check if user_foreign_languages exists")
	}

	return count > 0, nil
}

// ForeignLanguage pointed to by the foreign key.
func (o *UserForeignLanguage) ForeignLanguage(mods ...qm.QueryMod) foreignLanguageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ForeignLanguageID),
	}

	queryMods = append(queryMods, mods...)

	return ForeignLanguages(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserForeignLanguage) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadForeignLanguage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userForeignLanguageL) LoadForeignLanguage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserForeignLanguage interface{}, mods queries.Applicator) error {
	var slice []*UserForeignLanguage
	var object *UserForeignLanguage

	if singular {
		var ok bool
		object, ok = maybeUserForeignLanguage.(*UserForeignLanguage)
		if !ok {
			object = new(UserForeignLanguage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserForeignLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserForeignLanguage))
			}
		}
	} else {
		s, ok := maybeUserForeignLanguage.(*[]*UserForeignLanguage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserForeignLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserForeignLanguage))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userForeignLanguageR{}
		}
		if !queries.IsNil(object.ForeignLanguageID) {
			args = append(args, object.ForeignLanguageID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userForeignLanguageR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ForeignLanguageID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ForeignLanguageID) {
				args = append(args, obj.ForeignLanguageID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`foreign_languages`),
		qm.WhereIn(`foreign_languages.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ForeignLanguage")
	}

	var resultSlice []*ForeignLanguage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ForeignLanguage")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for foreign_languages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for foreign_languages")
	}

	if len(foreignLanguageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ForeignLanguage = foreign
		if foreign.R == nil {
			foreign.R = &foreignLanguageR{}
		}
		foreign.R.UserForeignLanguages = append(foreign.R.UserForeignLanguages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ForeignLanguageID, foreign.ID) {
				local.R.ForeignLanguage = foreign
				if foreign.R == nil {
					foreign.R = &foreignLanguageR{}
				}
				foreign.R.UserForeignLanguages = append(foreign.R.UserForeignLanguages, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userForeignLanguageL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserForeignLanguage interface{}, mods queries.Applicator) error {
	var slice []*UserForeignLanguage
	var object *UserForeignLanguage

	if singular {
		var ok bool
		object, ok = maybeUserForeignLanguage.(*UserForeignLanguage)
		if !ok {
			object = new(UserForeignLanguage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserForeignLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserForeignLanguage))
			}
		}
	} else {
		s, ok := maybeUserForeignLanguage.(*[]*UserForeignLanguage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserForeignLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserForeignLanguage))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userForeignLanguageR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userForeignLanguageR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserForeignLanguages = append(foreign.R.UserForeignLanguages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserForeignLanguages = append(foreign.R.UserForeignLanguages, local)
				break
			}
		}
	}

	return nil
}

// SetForeignLanguage of the userForeignLanguage to the related item.
// Sets o.R.ForeignLanguage to related.
// Adds o to related.R.UserForeignLanguages.
func (o *UserForeignLanguage) SetForeignLanguage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ForeignLanguage) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_foreign_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"foreign_language_id"}),
		strmangle.WhereClause("\"", "\"", 2, userForeignLanguagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.UserEducationYear}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ForeignLanguageID, related.ID)
	if o.R == nil {
		o.R = &userForeignLanguageR{
			ForeignLanguage: related,
		}
	} else {
		o.R.ForeignLanguage = related
	}

	if related.R == nil {
		related.R = &foreignLanguageR{
			UserForeignLanguages: UserForeignLanguageSlice{o},
		}
	} else {
		related.R.UserForeignLanguages = append(related.R.UserForeignLanguages, o)
	}

	return nil
}

// RemoveForeignLanguage relationship.
// Sets o.R.ForeignLanguage to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UserForeignLanguage) RemoveForeignLanguage(ctx context.Context, exec boil.ContextExecutor, related *ForeignLanguage) error {
	var err error

	queries.SetScanner(&o.ForeignLanguageID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("foreign_language_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ForeignLanguage = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UserForeignLanguages {
		if queries.Equal(o.ForeignLanguageID, ri.ForeignLanguageID) {
			continue
		}

		ln := len(related.R.UserForeignLanguages)
		if ln > 1 && i < ln-1 {
			related.R.UserForeignLanguages[i] = related.R.UserForeignLanguages[ln-1]
		}
		related.R.UserForeignLanguages = related.R.UserForeignLanguages[:ln-1]
		break
	}
	return nil
}

// SetUser of the userForeignLanguage to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserForeignLanguages.
func (o *UserForeignLanguage) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_foreign_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userForeignLanguagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.UserEducationYear}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userForeignLanguageR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserForeignLanguages: UserForeignLanguageSlice{o},
		}
	} else {
		related.R.UserForeignLanguages = append(related.R.UserForeignLanguages, o)
	}

	return nil
}

// UserForeignLanguages retrieves all the records using an executor.
func UserForeignLanguages(mods ...qm.QueryMod) userForeignLanguageQuery {
	mods = append(mods, qm.From("\"user_foreign_languages\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_foreign_languages\".*"})
	}

	return userForeignLanguageQuery{q}
}

// FindUserForeignLanguage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserForeignLanguage(ctx context.Context, exec boil.ContextExecutor, userID int64, userEducationYear int16, selectCols ...string) (*UserForeignLanguage, error) {
	userForeignLanguageObj := &UserForeignLanguage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_foreign_languages\" where \"user_id\"=$1 AND \"user_education_year\"=$2", sel,
	)

	q := queries.Raw(query, userID, userEducationYear)

	err := q.Bind(ctx, exec, userForeignLanguageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "tpportal: unable to select from user_foreign_languages")
	}

	if err = userForeignLanguageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userForeignLanguageObj, err
	}

	return userForeignLanguageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserForeignLanguage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("tpportal: no user_foreign_languages provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userForeignLanguageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userForeignLanguageInsertCacheMut.RLock()
	cache, cached := userForeignLanguageInsertCache[key]
	userForeignLanguageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userForeignLanguageAllColumns,
			userForeignLanguageColumnsWithDefault,
			userForeignLanguageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userForeignLanguageType, userForeignLanguageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userForeignLanguageType, userForeignLanguageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_foreign_languages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_foreign_languages\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "tpportal: unable to insert into user_foreign_languages")
	}

	if !cached {
		userForeignLanguageInsertCacheMut.Lock()
		userForeignLanguageInsertCache[key] = cache
		userForeignLanguageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserForeignLanguage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserForeignLanguage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userForeignLanguageUpdateCacheMut.RLock()
	cache, cached := userForeignLanguageUpdateCache[key]
	userForeignLanguageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userForeignLanguageAllColumns,
			userForeignLanguagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("tpportal: unable to update user_foreign_languages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_foreign_languages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userForeignLanguagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userForeignLanguageType, userForeignLanguageMapping, append(wl, userForeignLanguagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update user_foreign_languages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by update for user_foreign_languages")
	}

	if !cached {
		userForeignLanguageUpdateCacheMut.Lock()
		userForeignLanguageUpdateCache[key] = cache
		userForeignLanguageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userForeignLanguageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update all for user_foreign_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to retrieve rows affected for user_foreign_languages")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserForeignLanguageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("tpportal: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userForeignLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_foreign_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userForeignLanguagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update all in userForeignLanguage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to retrieve rows affected all in update all userForeignLanguage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserForeignLanguage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("tpportal: no user_foreign_languages provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userForeignLanguageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userForeignLanguageUpsertCacheMut.RLock()
	cache, cached := userForeignLanguageUpsertCache[key]
	userForeignLanguageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userForeignLanguageAllColumns,
			userForeignLanguageColumnsWithDefault,
			userForeignLanguageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userForeignLanguageAllColumns,
			userForeignLanguagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("tpportal: unable to upsert user_foreign_languages, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userForeignLanguagePrimaryKeyColumns))
			copy(conflict, userForeignLanguagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_foreign_languages\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userForeignLanguageType, userForeignLanguageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userForeignLanguageType, userForeignLanguageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "tpportal: unable to upsert user_foreign_languages")
	}

	if !cached {
		userForeignLanguageUpsertCacheMut.Lock()
		userForeignLanguageUpsertCache[key] = cache
		userForeignLanguageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserForeignLanguage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserForeignLanguage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("tpportal: no UserForeignLanguage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userForeignLanguagePrimaryKeyMapping)
	sql := "DELETE FROM \"user_foreign_languages\" WHERE \"user_id\"=$1 AND \"user_education_year\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete from user_foreign_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by delete for user_foreign_languages")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userForeignLanguageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("tpportal: no userForeignLanguageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete all from user_foreign_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by deleteall for user_foreign_languages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserForeignLanguageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userForeignLanguageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userForeignLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_foreign_languages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userForeignLanguagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete all from userForeignLanguage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by deleteall for user_foreign_languages")
	}

	if len(userForeignLanguageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserForeignLanguage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserForeignLanguage(ctx, exec, o.UserID, o.UserEducationYear)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserForeignLanguageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserForeignLanguageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userForeignLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_foreign_languages\".* FROM \"user_foreign_languages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userForeignLanguagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "tpportal: unable to reload all in UserForeignLanguageSlice")
	}

	*o = slice

	return nil
}

// UserForeignLanguageExists checks if the UserForeignLanguage row exists.
func UserForeignLanguageExists(ctx context.Context, exec boil.ContextExecutor, userID int64, userEducationYear int16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_foreign_languages\" where \"user_id\"=$1 AND \"user_education_year\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, userEducationYear)
	}
	row := exec.QueryRowContext(ctx, sql, userID, userEducationYear)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "tpportal: unable to check if user_foreign_languages exists")
	}

	return exists, nil
}

// Exists checks if the UserForeignLanguage row exists.
func (o *UserForeignLanguage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserForeignLanguageExists(ctx, exec, o.UserID, o.UserEducationYear)
}
