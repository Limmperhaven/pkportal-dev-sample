// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package tpportal

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("tpportal: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type TestDatePubStatus string

// Enum values for TestDatePubStatus
const (
	TestDatePubStatusShown  TestDatePubStatus = "shown"
	TestDatePubStatusHidden TestDatePubStatus = "hidden"
)

func AllTestDatePubStatus() []TestDatePubStatus {
	return []TestDatePubStatus{
		TestDatePubStatusShown,
		TestDatePubStatusHidden,
	}
}

func (e TestDatePubStatus) IsValid() error {
	switch e {
	case TestDatePubStatusShown, TestDatePubStatusHidden:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e TestDatePubStatus) String() string {
	return string(e)
}

type ScreenshotType string

// Enum values for ScreenshotType
const (
	ScreenshotTypeLyceum   ScreenshotType = "lyceum"
	ScreenshotTypeOlympiad ScreenshotType = "olympiad"
	ScreenshotTypeMCKO     ScreenshotType = "MCKO"
	ScreenshotTypeQuota    ScreenshotType = "quota"
)

func AllScreenshotType() []ScreenshotType {
	return []ScreenshotType{
		ScreenshotTypeLyceum,
		ScreenshotTypeOlympiad,
		ScreenshotTypeMCKO,
		ScreenshotTypeQuota,
	}
}

func (e ScreenshotType) IsValid() error {
	switch e {
	case ScreenshotTypeLyceum, ScreenshotTypeOlympiad, ScreenshotTypeMCKO, ScreenshotTypeQuota:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e ScreenshotType) String() string {
	return string(e)
}

type UserGender string

// Enum values for UserGender
const (
	UserGenderMale   UserGender = "male"
	UserGenderFemale UserGender = "female"
)

func AllUserGender() []UserGender {
	return []UserGender{
		UserGenderMale,
		UserGenderFemale,
	}
}

func (e UserGender) IsValid() error {
	switch e {
	case UserGenderMale, UserGenderFemale:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e UserGender) String() string {
	return string(e)
}

type UserRole string

// Enum values for UserRole
const (
	UserRoleAdmin UserRole = "admin"
	UserRoleUser  UserRole = "user"
)

func AllUserRole() []UserRole {
	return []UserRole{
		UserRoleAdmin,
		UserRoleUser,
	}
}

func (e UserRole) IsValid() error {
	switch e {
	case UserRoleAdmin, UserRoleUser:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e UserRole) String() string {
	return string(e)
}
