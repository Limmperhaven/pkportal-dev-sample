// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package tpportal

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TestDate is an object representing the database table.
type TestDate struct {
	ID               int64             `boil:"id" json:"id" toml:"id" yaml:"id"`
	DateTime         time.Time         `boil:"date_time" json:"date_time" toml:"date_time" yaml:"date_time"`
	Location         string            `boil:"location" json:"location" toml:"location" yaml:"location"`
	MaxPersons       int               `boil:"max_persons" json:"max_persons" toml:"max_persons" yaml:"max_persons"`
	EducationYear    int16             `boil:"education_year" json:"education_year" toml:"education_year" yaml:"education_year"`
	PubStatus        TestDatePubStatus `boil:"pub_status" json:"pub_status" toml:"pub_status" yaml:"pub_status"`
	NotificationSent bool              `boil:"notification_sent" json:"notification_sent" toml:"notification_sent" yaml:"notification_sent"`

	R *testDateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L testDateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TestDateColumns = struct {
	ID               string
	DateTime         string
	Location         string
	MaxPersons       string
	EducationYear    string
	PubStatus        string
	NotificationSent string
}{
	ID:               "id",
	DateTime:         "date_time",
	Location:         "location",
	MaxPersons:       "max_persons",
	EducationYear:    "education_year",
	PubStatus:        "pub_status",
	NotificationSent: "notification_sent",
}

var TestDateTableColumns = struct {
	ID               string
	DateTime         string
	Location         string
	MaxPersons       string
	EducationYear    string
	PubStatus        string
	NotificationSent string
}{
	ID:               "test_dates.id",
	DateTime:         "test_dates.date_time",
	Location:         "test_dates.location",
	MaxPersons:       "test_dates.max_persons",
	EducationYear:    "test_dates.education_year",
	PubStatus:        "test_dates.pub_status",
	NotificationSent: "test_dates.notification_sent",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperTestDatePubStatus struct{ field string }

func (w whereHelperTestDatePubStatus) EQ(x TestDatePubStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperTestDatePubStatus) NEQ(x TestDatePubStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperTestDatePubStatus) LT(x TestDatePubStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperTestDatePubStatus) LTE(x TestDatePubStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperTestDatePubStatus) GT(x TestDatePubStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperTestDatePubStatus) GTE(x TestDatePubStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperTestDatePubStatus) IN(slice []TestDatePubStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperTestDatePubStatus) NIN(slice []TestDatePubStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var TestDateWhere = struct {
	ID               whereHelperint64
	DateTime         whereHelpertime_Time
	Location         whereHelperstring
	MaxPersons       whereHelperint
	EducationYear    whereHelperint16
	PubStatus        whereHelperTestDatePubStatus
	NotificationSent whereHelperbool
}{
	ID:               whereHelperint64{field: "\"test_dates\".\"id\""},
	DateTime:         whereHelpertime_Time{field: "\"test_dates\".\"date_time\""},
	Location:         whereHelperstring{field: "\"test_dates\".\"location\""},
	MaxPersons:       whereHelperint{field: "\"test_dates\".\"max_persons\""},
	EducationYear:    whereHelperint16{field: "\"test_dates\".\"education_year\""},
	PubStatus:        whereHelperTestDatePubStatus{field: "\"test_dates\".\"pub_status\""},
	NotificationSent: whereHelperbool{field: "\"test_dates\".\"notification_sent\""},
}

// TestDateRels is where relationship names are stored.
var TestDateRels = struct {
	UserExamResults string
	UserTestDates   string
}{
	UserExamResults: "UserExamResults",
	UserTestDates:   "UserTestDates",
}

// testDateR is where relationships are stored.
type testDateR struct {
	UserExamResults UserExamResultSlice `boil:"UserExamResults" json:"UserExamResults" toml:"UserExamResults" yaml:"UserExamResults"`
	UserTestDates   UserTestDateSlice   `boil:"UserTestDates" json:"UserTestDates" toml:"UserTestDates" yaml:"UserTestDates"`
}

// NewStruct creates a new relationship struct
func (*testDateR) NewStruct() *testDateR {
	return &testDateR{}
}

func (r *testDateR) GetUserExamResults() UserExamResultSlice {
	if r == nil {
		return nil
	}
	return r.UserExamResults
}

func (r *testDateR) GetUserTestDates() UserTestDateSlice {
	if r == nil {
		return nil
	}
	return r.UserTestDates
}

// testDateL is where Load methods for each relationship are stored.
type testDateL struct{}

var (
	testDateAllColumns            = []string{"id", "date_time", "location", "max_persons", "education_year", "pub_status", "notification_sent"}
	testDateColumnsWithoutDefault = []string{"date_time", "location", "max_persons", "education_year"}
	testDateColumnsWithDefault    = []string{"id", "pub_status", "notification_sent"}
	testDatePrimaryKeyColumns     = []string{"id"}
	testDateGeneratedColumns      = []string{}
)

type (
	// TestDateSlice is an alias for a slice of pointers to TestDate.
	// This should almost always be used instead of []TestDate.
	TestDateSlice []*TestDate
	// TestDateHook is the signature for custom TestDate hook methods
	TestDateHook func(context.Context, boil.ContextExecutor, *TestDate) error

	testDateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	testDateType                 = reflect.TypeOf(&TestDate{})
	testDateMapping              = queries.MakeStructMapping(testDateType)
	testDatePrimaryKeyMapping, _ = queries.BindMapping(testDateType, testDateMapping, testDatePrimaryKeyColumns)
	testDateInsertCacheMut       sync.RWMutex
	testDateInsertCache          = make(map[string]insertCache)
	testDateUpdateCacheMut       sync.RWMutex
	testDateUpdateCache          = make(map[string]updateCache)
	testDateUpsertCacheMut       sync.RWMutex
	testDateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var testDateAfterSelectHooks []TestDateHook

var testDateBeforeInsertHooks []TestDateHook
var testDateAfterInsertHooks []TestDateHook

var testDateBeforeUpdateHooks []TestDateHook
var testDateAfterUpdateHooks []TestDateHook

var testDateBeforeDeleteHooks []TestDateHook
var testDateAfterDeleteHooks []TestDateHook

var testDateBeforeUpsertHooks []TestDateHook
var testDateAfterUpsertHooks []TestDateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TestDate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testDateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TestDate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testDateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TestDate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testDateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TestDate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testDateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TestDate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testDateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TestDate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testDateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TestDate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testDateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TestDate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testDateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TestDate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testDateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTestDateHook registers your hook function for all future operations.
func AddTestDateHook(hookPoint boil.HookPoint, testDateHook TestDateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		testDateAfterSelectHooks = append(testDateAfterSelectHooks, testDateHook)
	case boil.BeforeInsertHook:
		testDateBeforeInsertHooks = append(testDateBeforeInsertHooks, testDateHook)
	case boil.AfterInsertHook:
		testDateAfterInsertHooks = append(testDateAfterInsertHooks, testDateHook)
	case boil.BeforeUpdateHook:
		testDateBeforeUpdateHooks = append(testDateBeforeUpdateHooks, testDateHook)
	case boil.AfterUpdateHook:
		testDateAfterUpdateHooks = append(testDateAfterUpdateHooks, testDateHook)
	case boil.BeforeDeleteHook:
		testDateBeforeDeleteHooks = append(testDateBeforeDeleteHooks, testDateHook)
	case boil.AfterDeleteHook:
		testDateAfterDeleteHooks = append(testDateAfterDeleteHooks, testDateHook)
	case boil.BeforeUpsertHook:
		testDateBeforeUpsertHooks = append(testDateBeforeUpsertHooks, testDateHook)
	case boil.AfterUpsertHook:
		testDateAfterUpsertHooks = append(testDateAfterUpsertHooks, testDateHook)
	}
}

// One returns a single testDate record from the query.
func (q testDateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TestDate, error) {
	o := &TestDate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "tpportal: failed to execute a one query for test_dates")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TestDate records from the query.
func (q testDateQuery) All(ctx context.Context, exec boil.ContextExecutor) (TestDateSlice, error) {
	var o []*TestDate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "tpportal: failed to assign all query results to TestDate slice")
	}

	if len(testDateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TestDate records in the query.
func (q testDateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to count test_dates rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q testDateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "tpportal: failed to check if test_dates exists")
	}

	return count > 0, nil
}

// UserExamResults retrieves all the user_exam_result's UserExamResults with an executor.
func (o *TestDate) UserExamResults(mods ...qm.QueryMod) userExamResultQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_exam_results\".\"test_date_id\"=?", o.ID),
	)

	return UserExamResults(queryMods...)
}

// UserTestDates retrieves all the user_test_date's UserTestDates with an executor.
func (o *TestDate) UserTestDates(mods ...qm.QueryMod) userTestDateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_test_dates\".\"test_date_id\"=?", o.ID),
	)

	return UserTestDates(queryMods...)
}

// LoadUserExamResults allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (testDateL) LoadUserExamResults(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTestDate interface{}, mods queries.Applicator) error {
	var slice []*TestDate
	var object *TestDate

	if singular {
		var ok bool
		object, ok = maybeTestDate.(*TestDate)
		if !ok {
			object = new(TestDate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTestDate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTestDate))
			}
		}
	} else {
		s, ok := maybeTestDate.(*[]*TestDate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTestDate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTestDate))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &testDateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &testDateR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_exam_results`),
		qm.WhereIn(`user_exam_results.test_date_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_exam_results")
	}

	var resultSlice []*UserExamResult
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_exam_results")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_exam_results")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_exam_results")
	}

	if len(userExamResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserExamResults = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userExamResultR{}
			}
			foreign.R.TestDate = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TestDateID {
				local.R.UserExamResults = append(local.R.UserExamResults, foreign)
				if foreign.R == nil {
					foreign.R = &userExamResultR{}
				}
				foreign.R.TestDate = local
				break
			}
		}
	}

	return nil
}

// LoadUserTestDates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (testDateL) LoadUserTestDates(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTestDate interface{}, mods queries.Applicator) error {
	var slice []*TestDate
	var object *TestDate

	if singular {
		var ok bool
		object, ok = maybeTestDate.(*TestDate)
		if !ok {
			object = new(TestDate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTestDate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTestDate))
			}
		}
	} else {
		s, ok := maybeTestDate.(*[]*TestDate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTestDate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTestDate))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &testDateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &testDateR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_test_dates`),
		qm.WhereIn(`user_test_dates.test_date_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_test_dates")
	}

	var resultSlice []*UserTestDate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_test_dates")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_test_dates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_test_dates")
	}

	if len(userTestDateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserTestDates = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userTestDateR{}
			}
			foreign.R.TestDate = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TestDateID {
				local.R.UserTestDates = append(local.R.UserTestDates, foreign)
				if foreign.R == nil {
					foreign.R = &userTestDateR{}
				}
				foreign.R.TestDate = local
				break
			}
		}
	}

	return nil
}

// AddUserExamResults adds the given related objects to the existing relationships
// of the test_date, optionally inserting them as new records.
// Appends related to o.R.UserExamResults.
// Sets related.R.TestDate appropriately.
func (o *TestDate) AddUserExamResults(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserExamResult) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TestDateID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_exam_results\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"test_date_id"}),
				strmangle.WhereClause("\"", "\"", 2, userExamResultPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserID, rel.TestDateID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TestDateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &testDateR{
			UserExamResults: related,
		}
	} else {
		o.R.UserExamResults = append(o.R.UserExamResults, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userExamResultR{
				TestDate: o,
			}
		} else {
			rel.R.TestDate = o
		}
	}
	return nil
}

// AddUserTestDates adds the given related objects to the existing relationships
// of the test_date, optionally inserting them as new records.
// Appends related to o.R.UserTestDates.
// Sets related.R.TestDate appropriately.
func (o *TestDate) AddUserTestDates(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserTestDate) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TestDateID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_test_dates\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"test_date_id"}),
				strmangle.WhereClause("\"", "\"", 2, userTestDatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserID, rel.TestDateID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TestDateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &testDateR{
			UserTestDates: related,
		}
	} else {
		o.R.UserTestDates = append(o.R.UserTestDates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userTestDateR{
				TestDate: o,
			}
		} else {
			rel.R.TestDate = o
		}
	}
	return nil
}

// TestDates retrieves all the records using an executor.
func TestDates(mods ...qm.QueryMod) testDateQuery {
	mods = append(mods, qm.From("\"test_dates\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"test_dates\".*"})
	}

	return testDateQuery{q}
}

// FindTestDate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTestDate(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TestDate, error) {
	testDateObj := &TestDate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"test_dates\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, testDateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "tpportal: unable to select from test_dates")
	}

	if err = testDateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return testDateObj, err
	}

	return testDateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TestDate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("tpportal: no test_dates provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(testDateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	testDateInsertCacheMut.RLock()
	cache, cached := testDateInsertCache[key]
	testDateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			testDateAllColumns,
			testDateColumnsWithDefault,
			testDateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(testDateType, testDateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(testDateType, testDateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"test_dates\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"test_dates\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "tpportal: unable to insert into test_dates")
	}

	if !cached {
		testDateInsertCacheMut.Lock()
		testDateInsertCache[key] = cache
		testDateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TestDate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TestDate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	testDateUpdateCacheMut.RLock()
	cache, cached := testDateUpdateCache[key]
	testDateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			testDateAllColumns,
			testDatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("tpportal: unable to update test_dates, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"test_dates\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, testDatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(testDateType, testDateMapping, append(wl, testDatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update test_dates row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by update for test_dates")
	}

	if !cached {
		testDateUpdateCacheMut.Lock()
		testDateUpdateCache[key] = cache
		testDateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q testDateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update all for test_dates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to retrieve rows affected for test_dates")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TestDateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("tpportal: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testDatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"test_dates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, testDatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update all in testDate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to retrieve rows affected all in update all testDate")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TestDate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("tpportal: no test_dates provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(testDateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	testDateUpsertCacheMut.RLock()
	cache, cached := testDateUpsertCache[key]
	testDateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			testDateAllColumns,
			testDateColumnsWithDefault,
			testDateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			testDateAllColumns,
			testDatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("tpportal: unable to upsert test_dates, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(testDatePrimaryKeyColumns))
			copy(conflict, testDatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"test_dates\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(testDateType, testDateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(testDateType, testDateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "tpportal: unable to upsert test_dates")
	}

	if !cached {
		testDateUpsertCacheMut.Lock()
		testDateUpsertCache[key] = cache
		testDateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TestDate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TestDate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("tpportal: no TestDate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), testDatePrimaryKeyMapping)
	sql := "DELETE FROM \"test_dates\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete from test_dates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by delete for test_dates")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q testDateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("tpportal: no testDateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete all from test_dates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by deleteall for test_dates")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TestDateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(testDateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testDatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"test_dates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, testDatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete all from testDate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by deleteall for test_dates")
	}

	if len(testDateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TestDate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTestDate(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TestDateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TestDateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testDatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"test_dates\".* FROM \"test_dates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, testDatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "tpportal: unable to reload all in TestDateSlice")
	}

	*o = slice

	return nil
}

// TestDateExists checks if the TestDate row exists.
func TestDateExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"test_dates\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "tpportal: unable to check if test_dates exists")
	}

	return exists, nil
}

// Exists checks if the TestDate row exists.
func (o *TestDate) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TestDateExists(ctx, exec, o.ID)
}
