// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package tpportal

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserProfileSubject is an object representing the database table.
type UserProfileSubject struct {
	UserID                 int64      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	UserEducationYear      int16      `boil:"user_education_year" json:"user_education_year" toml:"user_education_year" yaml:"user_education_year"`
	FirstProfileSubjectID  null.Int64 `boil:"first_profile_subject_id" json:"first_profile_subject_id,omitempty" toml:"first_profile_subject_id" yaml:"first_profile_subject_id,omitempty"`
	SecondProfileSubjectID null.Int64 `boil:"second_profile_subject_id" json:"second_profile_subject_id,omitempty" toml:"second_profile_subject_id" yaml:"second_profile_subject_id,omitempty"`

	R *userProfileSubjectR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userProfileSubjectL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserProfileSubjectColumns = struct {
	UserID                 string
	UserEducationYear      string
	FirstProfileSubjectID  string
	SecondProfileSubjectID string
}{
	UserID:                 "user_id",
	UserEducationYear:      "user_education_year",
	FirstProfileSubjectID:  "first_profile_subject_id",
	SecondProfileSubjectID: "second_profile_subject_id",
}

var UserProfileSubjectTableColumns = struct {
	UserID                 string
	UserEducationYear      string
	FirstProfileSubjectID  string
	SecondProfileSubjectID string
}{
	UserID:                 "user_profile_subjects.user_id",
	UserEducationYear:      "user_profile_subjects.user_education_year",
	FirstProfileSubjectID:  "user_profile_subjects.first_profile_subject_id",
	SecondProfileSubjectID: "user_profile_subjects.second_profile_subject_id",
}

// Generated where

var UserProfileSubjectWhere = struct {
	UserID                 whereHelperint64
	UserEducationYear      whereHelperint16
	FirstProfileSubjectID  whereHelpernull_Int64
	SecondProfileSubjectID whereHelpernull_Int64
}{
	UserID:                 whereHelperint64{field: "\"user_profile_subjects\".\"user_id\""},
	UserEducationYear:      whereHelperint16{field: "\"user_profile_subjects\".\"user_education_year\""},
	FirstProfileSubjectID:  whereHelpernull_Int64{field: "\"user_profile_subjects\".\"first_profile_subject_id\""},
	SecondProfileSubjectID: whereHelpernull_Int64{field: "\"user_profile_subjects\".\"second_profile_subject_id\""},
}

// UserProfileSubjectRels is where relationship names are stored.
var UserProfileSubjectRels = struct {
	FirstProfileSubject  string
	SecondProfileSubject string
	User                 string
}{
	FirstProfileSubject:  "FirstProfileSubject",
	SecondProfileSubject: "SecondProfileSubject",
	User:                 "User",
}

// userProfileSubjectR is where relationships are stored.
type userProfileSubjectR struct {
	FirstProfileSubject  *Subject `boil:"FirstProfileSubject" json:"FirstProfileSubject" toml:"FirstProfileSubject" yaml:"FirstProfileSubject"`
	SecondProfileSubject *Subject `boil:"SecondProfileSubject" json:"SecondProfileSubject" toml:"SecondProfileSubject" yaml:"SecondProfileSubject"`
	User                 *User    `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userProfileSubjectR) NewStruct() *userProfileSubjectR {
	return &userProfileSubjectR{}
}

func (r *userProfileSubjectR) GetFirstProfileSubject() *Subject {
	if r == nil {
		return nil
	}
	return r.FirstProfileSubject
}

func (r *userProfileSubjectR) GetSecondProfileSubject() *Subject {
	if r == nil {
		return nil
	}
	return r.SecondProfileSubject
}

func (r *userProfileSubjectR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userProfileSubjectL is where Load methods for each relationship are stored.
type userProfileSubjectL struct{}

var (
	userProfileSubjectAllColumns            = []string{"user_id", "user_education_year", "first_profile_subject_id", "second_profile_subject_id"}
	userProfileSubjectColumnsWithoutDefault = []string{"user_id", "user_education_year"}
	userProfileSubjectColumnsWithDefault    = []string{"first_profile_subject_id", "second_profile_subject_id"}
	userProfileSubjectPrimaryKeyColumns     = []string{"user_id", "user_education_year"}
	userProfileSubjectGeneratedColumns      = []string{}
)

type (
	// UserProfileSubjectSlice is an alias for a slice of pointers to UserProfileSubject.
	// This should almost always be used instead of []UserProfileSubject.
	UserProfileSubjectSlice []*UserProfileSubject
	// UserProfileSubjectHook is the signature for custom UserProfileSubject hook methods
	UserProfileSubjectHook func(context.Context, boil.ContextExecutor, *UserProfileSubject) error

	userProfileSubjectQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userProfileSubjectType                 = reflect.TypeOf(&UserProfileSubject{})
	userProfileSubjectMapping              = queries.MakeStructMapping(userProfileSubjectType)
	userProfileSubjectPrimaryKeyMapping, _ = queries.BindMapping(userProfileSubjectType, userProfileSubjectMapping, userProfileSubjectPrimaryKeyColumns)
	userProfileSubjectInsertCacheMut       sync.RWMutex
	userProfileSubjectInsertCache          = make(map[string]insertCache)
	userProfileSubjectUpdateCacheMut       sync.RWMutex
	userProfileSubjectUpdateCache          = make(map[string]updateCache)
	userProfileSubjectUpsertCacheMut       sync.RWMutex
	userProfileSubjectUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userProfileSubjectAfterSelectHooks []UserProfileSubjectHook

var userProfileSubjectBeforeInsertHooks []UserProfileSubjectHook
var userProfileSubjectAfterInsertHooks []UserProfileSubjectHook

var userProfileSubjectBeforeUpdateHooks []UserProfileSubjectHook
var userProfileSubjectAfterUpdateHooks []UserProfileSubjectHook

var userProfileSubjectBeforeDeleteHooks []UserProfileSubjectHook
var userProfileSubjectAfterDeleteHooks []UserProfileSubjectHook

var userProfileSubjectBeforeUpsertHooks []UserProfileSubjectHook
var userProfileSubjectAfterUpsertHooks []UserProfileSubjectHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserProfileSubject) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileSubjectAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserProfileSubject) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileSubjectBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserProfileSubject) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileSubjectAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserProfileSubject) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileSubjectBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserProfileSubject) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileSubjectAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserProfileSubject) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileSubjectBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserProfileSubject) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileSubjectAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserProfileSubject) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileSubjectBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserProfileSubject) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileSubjectAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserProfileSubjectHook registers your hook function for all future operations.
func AddUserProfileSubjectHook(hookPoint boil.HookPoint, userProfileSubjectHook UserProfileSubjectHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userProfileSubjectAfterSelectHooks = append(userProfileSubjectAfterSelectHooks, userProfileSubjectHook)
	case boil.BeforeInsertHook:
		userProfileSubjectBeforeInsertHooks = append(userProfileSubjectBeforeInsertHooks, userProfileSubjectHook)
	case boil.AfterInsertHook:
		userProfileSubjectAfterInsertHooks = append(userProfileSubjectAfterInsertHooks, userProfileSubjectHook)
	case boil.BeforeUpdateHook:
		userProfileSubjectBeforeUpdateHooks = append(userProfileSubjectBeforeUpdateHooks, userProfileSubjectHook)
	case boil.AfterUpdateHook:
		userProfileSubjectAfterUpdateHooks = append(userProfileSubjectAfterUpdateHooks, userProfileSubjectHook)
	case boil.BeforeDeleteHook:
		userProfileSubjectBeforeDeleteHooks = append(userProfileSubjectBeforeDeleteHooks, userProfileSubjectHook)
	case boil.AfterDeleteHook:
		userProfileSubjectAfterDeleteHooks = append(userProfileSubjectAfterDeleteHooks, userProfileSubjectHook)
	case boil.BeforeUpsertHook:
		userProfileSubjectBeforeUpsertHooks = append(userProfileSubjectBeforeUpsertHooks, userProfileSubjectHook)
	case boil.AfterUpsertHook:
		userProfileSubjectAfterUpsertHooks = append(userProfileSubjectAfterUpsertHooks, userProfileSubjectHook)
	}
}

// One returns a single userProfileSubject record from the query.
func (q userProfileSubjectQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserProfileSubject, error) {
	o := &UserProfileSubject{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "tpportal: failed to execute a one query for user_profile_subjects")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserProfileSubject records from the query.
func (q userProfileSubjectQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserProfileSubjectSlice, error) {
	var o []*UserProfileSubject

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "tpportal: failed to assign all query results to UserProfileSubject slice")
	}

	if len(userProfileSubjectAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserProfileSubject records in the query.
func (q userProfileSubjectQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to count user_profile_subjects rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userProfileSubjectQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "tpportal: failed to check if user_profile_subjects exists")
	}

	return count > 0, nil
}

// FirstProfileSubject pointed to by the foreign key.
func (o *UserProfileSubject) FirstProfileSubject(mods ...qm.QueryMod) subjectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FirstProfileSubjectID),
	}

	queryMods = append(queryMods, mods...)

	return Subjects(queryMods...)
}

// SecondProfileSubject pointed to by the foreign key.
func (o *UserProfileSubject) SecondProfileSubject(mods ...qm.QueryMod) subjectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SecondProfileSubjectID),
	}

	queryMods = append(queryMods, mods...)

	return Subjects(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserProfileSubject) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadFirstProfileSubject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userProfileSubjectL) LoadFirstProfileSubject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserProfileSubject interface{}, mods queries.Applicator) error {
	var slice []*UserProfileSubject
	var object *UserProfileSubject

	if singular {
		var ok bool
		object, ok = maybeUserProfileSubject.(*UserProfileSubject)
		if !ok {
			object = new(UserProfileSubject)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserProfileSubject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserProfileSubject))
			}
		}
	} else {
		s, ok := maybeUserProfileSubject.(*[]*UserProfileSubject)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserProfileSubject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserProfileSubject))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userProfileSubjectR{}
		}
		if !queries.IsNil(object.FirstProfileSubjectID) {
			args = append(args, object.FirstProfileSubjectID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileSubjectR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FirstProfileSubjectID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FirstProfileSubjectID) {
				args = append(args, obj.FirstProfileSubjectID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`subjects`),
		qm.WhereIn(`subjects.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Subject")
	}

	var resultSlice []*Subject
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Subject")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for subjects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subjects")
	}

	if len(subjectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FirstProfileSubject = foreign
		if foreign.R == nil {
			foreign.R = &subjectR{}
		}
		foreign.R.FirstProfileSubjectUserProfileSubjects = append(foreign.R.FirstProfileSubjectUserProfileSubjects, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FirstProfileSubjectID, foreign.ID) {
				local.R.FirstProfileSubject = foreign
				if foreign.R == nil {
					foreign.R = &subjectR{}
				}
				foreign.R.FirstProfileSubjectUserProfileSubjects = append(foreign.R.FirstProfileSubjectUserProfileSubjects, local)
				break
			}
		}
	}

	return nil
}

// LoadSecondProfileSubject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userProfileSubjectL) LoadSecondProfileSubject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserProfileSubject interface{}, mods queries.Applicator) error {
	var slice []*UserProfileSubject
	var object *UserProfileSubject

	if singular {
		var ok bool
		object, ok = maybeUserProfileSubject.(*UserProfileSubject)
		if !ok {
			object = new(UserProfileSubject)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserProfileSubject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserProfileSubject))
			}
		}
	} else {
		s, ok := maybeUserProfileSubject.(*[]*UserProfileSubject)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserProfileSubject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserProfileSubject))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userProfileSubjectR{}
		}
		if !queries.IsNil(object.SecondProfileSubjectID) {
			args = append(args, object.SecondProfileSubjectID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileSubjectR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SecondProfileSubjectID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SecondProfileSubjectID) {
				args = append(args, obj.SecondProfileSubjectID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`subjects`),
		qm.WhereIn(`subjects.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Subject")
	}

	var resultSlice []*Subject
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Subject")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for subjects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subjects")
	}

	if len(subjectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SecondProfileSubject = foreign
		if foreign.R == nil {
			foreign.R = &subjectR{}
		}
		foreign.R.SecondProfileSubjectUserProfileSubjects = append(foreign.R.SecondProfileSubjectUserProfileSubjects, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SecondProfileSubjectID, foreign.ID) {
				local.R.SecondProfileSubject = foreign
				if foreign.R == nil {
					foreign.R = &subjectR{}
				}
				foreign.R.SecondProfileSubjectUserProfileSubjects = append(foreign.R.SecondProfileSubjectUserProfileSubjects, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userProfileSubjectL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserProfileSubject interface{}, mods queries.Applicator) error {
	var slice []*UserProfileSubject
	var object *UserProfileSubject

	if singular {
		var ok bool
		object, ok = maybeUserProfileSubject.(*UserProfileSubject)
		if !ok {
			object = new(UserProfileSubject)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserProfileSubject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserProfileSubject))
			}
		}
	} else {
		s, ok := maybeUserProfileSubject.(*[]*UserProfileSubject)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserProfileSubject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserProfileSubject))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userProfileSubjectR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileSubjectR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserProfileSubjects = append(foreign.R.UserProfileSubjects, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserProfileSubjects = append(foreign.R.UserProfileSubjects, local)
				break
			}
		}
	}

	return nil
}

// SetFirstProfileSubject of the userProfileSubject to the related item.
// Sets o.R.FirstProfileSubject to related.
// Adds o to related.R.FirstProfileSubjectUserProfileSubjects.
func (o *UserProfileSubject) SetFirstProfileSubject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Subject) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_profile_subjects\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"first_profile_subject_id"}),
		strmangle.WhereClause("\"", "\"", 2, userProfileSubjectPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.UserEducationYear}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FirstProfileSubjectID, related.ID)
	if o.R == nil {
		o.R = &userProfileSubjectR{
			FirstProfileSubject: related,
		}
	} else {
		o.R.FirstProfileSubject = related
	}

	if related.R == nil {
		related.R = &subjectR{
			FirstProfileSubjectUserProfileSubjects: UserProfileSubjectSlice{o},
		}
	} else {
		related.R.FirstProfileSubjectUserProfileSubjects = append(related.R.FirstProfileSubjectUserProfileSubjects, o)
	}

	return nil
}

// RemoveFirstProfileSubject relationship.
// Sets o.R.FirstProfileSubject to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UserProfileSubject) RemoveFirstProfileSubject(ctx context.Context, exec boil.ContextExecutor, related *Subject) error {
	var err error

	queries.SetScanner(&o.FirstProfileSubjectID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("first_profile_subject_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.FirstProfileSubject = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FirstProfileSubjectUserProfileSubjects {
		if queries.Equal(o.FirstProfileSubjectID, ri.FirstProfileSubjectID) {
			continue
		}

		ln := len(related.R.FirstProfileSubjectUserProfileSubjects)
		if ln > 1 && i < ln-1 {
			related.R.FirstProfileSubjectUserProfileSubjects[i] = related.R.FirstProfileSubjectUserProfileSubjects[ln-1]
		}
		related.R.FirstProfileSubjectUserProfileSubjects = related.R.FirstProfileSubjectUserProfileSubjects[:ln-1]
		break
	}
	return nil
}

// SetSecondProfileSubject of the userProfileSubject to the related item.
// Sets o.R.SecondProfileSubject to related.
// Adds o to related.R.SecondProfileSubjectUserProfileSubjects.
func (o *UserProfileSubject) SetSecondProfileSubject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Subject) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_profile_subjects\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"second_profile_subject_id"}),
		strmangle.WhereClause("\"", "\"", 2, userProfileSubjectPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.UserEducationYear}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SecondProfileSubjectID, related.ID)
	if o.R == nil {
		o.R = &userProfileSubjectR{
			SecondProfileSubject: related,
		}
	} else {
		o.R.SecondProfileSubject = related
	}

	if related.R == nil {
		related.R = &subjectR{
			SecondProfileSubjectUserProfileSubjects: UserProfileSubjectSlice{o},
		}
	} else {
		related.R.SecondProfileSubjectUserProfileSubjects = append(related.R.SecondProfileSubjectUserProfileSubjects, o)
	}

	return nil
}

// RemoveSecondProfileSubject relationship.
// Sets o.R.SecondProfileSubject to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UserProfileSubject) RemoveSecondProfileSubject(ctx context.Context, exec boil.ContextExecutor, related *Subject) error {
	var err error

	queries.SetScanner(&o.SecondProfileSubjectID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("second_profile_subject_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SecondProfileSubject = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SecondProfileSubjectUserProfileSubjects {
		if queries.Equal(o.SecondProfileSubjectID, ri.SecondProfileSubjectID) {
			continue
		}

		ln := len(related.R.SecondProfileSubjectUserProfileSubjects)
		if ln > 1 && i < ln-1 {
			related.R.SecondProfileSubjectUserProfileSubjects[i] = related.R.SecondProfileSubjectUserProfileSubjects[ln-1]
		}
		related.R.SecondProfileSubjectUserProfileSubjects = related.R.SecondProfileSubjectUserProfileSubjects[:ln-1]
		break
	}
	return nil
}

// SetUser of the userProfileSubject to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserProfileSubjects.
func (o *UserProfileSubject) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_profile_subjects\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userProfileSubjectPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.UserEducationYear}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userProfileSubjectR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserProfileSubjects: UserProfileSubjectSlice{o},
		}
	} else {
		related.R.UserProfileSubjects = append(related.R.UserProfileSubjects, o)
	}

	return nil
}

// UserProfileSubjects retrieves all the records using an executor.
func UserProfileSubjects(mods ...qm.QueryMod) userProfileSubjectQuery {
	mods = append(mods, qm.From("\"user_profile_subjects\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_profile_subjects\".*"})
	}

	return userProfileSubjectQuery{q}
}

// FindUserProfileSubject retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserProfileSubject(ctx context.Context, exec boil.ContextExecutor, userID int64, userEducationYear int16, selectCols ...string) (*UserProfileSubject, error) {
	userProfileSubjectObj := &UserProfileSubject{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_profile_subjects\" where \"user_id\"=$1 AND \"user_education_year\"=$2", sel,
	)

	q := queries.Raw(query, userID, userEducationYear)

	err := q.Bind(ctx, exec, userProfileSubjectObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "tpportal: unable to select from user_profile_subjects")
	}

	if err = userProfileSubjectObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userProfileSubjectObj, err
	}

	return userProfileSubjectObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserProfileSubject) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("tpportal: no user_profile_subjects provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userProfileSubjectColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userProfileSubjectInsertCacheMut.RLock()
	cache, cached := userProfileSubjectInsertCache[key]
	userProfileSubjectInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userProfileSubjectAllColumns,
			userProfileSubjectColumnsWithDefault,
			userProfileSubjectColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userProfileSubjectType, userProfileSubjectMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userProfileSubjectType, userProfileSubjectMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_profile_subjects\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_profile_subjects\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "tpportal: unable to insert into user_profile_subjects")
	}

	if !cached {
		userProfileSubjectInsertCacheMut.Lock()
		userProfileSubjectInsertCache[key] = cache
		userProfileSubjectInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserProfileSubject.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserProfileSubject) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userProfileSubjectUpdateCacheMut.RLock()
	cache, cached := userProfileSubjectUpdateCache[key]
	userProfileSubjectUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userProfileSubjectAllColumns,
			userProfileSubjectPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("tpportal: unable to update user_profile_subjects, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_profile_subjects\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userProfileSubjectPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userProfileSubjectType, userProfileSubjectMapping, append(wl, userProfileSubjectPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update user_profile_subjects row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by update for user_profile_subjects")
	}

	if !cached {
		userProfileSubjectUpdateCacheMut.Lock()
		userProfileSubjectUpdateCache[key] = cache
		userProfileSubjectUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userProfileSubjectQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update all for user_profile_subjects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to retrieve rows affected for user_profile_subjects")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserProfileSubjectSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("tpportal: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userProfileSubjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_profile_subjects\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userProfileSubjectPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update all in userProfileSubject slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to retrieve rows affected all in update all userProfileSubject")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserProfileSubject) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("tpportal: no user_profile_subjects provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userProfileSubjectColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userProfileSubjectUpsertCacheMut.RLock()
	cache, cached := userProfileSubjectUpsertCache[key]
	userProfileSubjectUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userProfileSubjectAllColumns,
			userProfileSubjectColumnsWithDefault,
			userProfileSubjectColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userProfileSubjectAllColumns,
			userProfileSubjectPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("tpportal: unable to upsert user_profile_subjects, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userProfileSubjectPrimaryKeyColumns))
			copy(conflict, userProfileSubjectPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_profile_subjects\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userProfileSubjectType, userProfileSubjectMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userProfileSubjectType, userProfileSubjectMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "tpportal: unable to upsert user_profile_subjects")
	}

	if !cached {
		userProfileSubjectUpsertCacheMut.Lock()
		userProfileSubjectUpsertCache[key] = cache
		userProfileSubjectUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserProfileSubject record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserProfileSubject) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("tpportal: no UserProfileSubject provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userProfileSubjectPrimaryKeyMapping)
	sql := "DELETE FROM \"user_profile_subjects\" WHERE \"user_id\"=$1 AND \"user_education_year\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete from user_profile_subjects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by delete for user_profile_subjects")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userProfileSubjectQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("tpportal: no userProfileSubjectQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete all from user_profile_subjects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by deleteall for user_profile_subjects")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserProfileSubjectSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userProfileSubjectBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userProfileSubjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_profile_subjects\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userProfileSubjectPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete all from userProfileSubject slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by deleteall for user_profile_subjects")
	}

	if len(userProfileSubjectAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserProfileSubject) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserProfileSubject(ctx, exec, o.UserID, o.UserEducationYear)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserProfileSubjectSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserProfileSubjectSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userProfileSubjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_profile_subjects\".* FROM \"user_profile_subjects\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userProfileSubjectPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "tpportal: unable to reload all in UserProfileSubjectSlice")
	}

	*o = slice

	return nil
}

// UserProfileSubjectExists checks if the UserProfileSubject row exists.
func UserProfileSubjectExists(ctx context.Context, exec boil.ContextExecutor, userID int64, userEducationYear int16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_profile_subjects\" where \"user_id\"=$1 AND \"user_education_year\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, userEducationYear)
	}
	row := exec.QueryRowContext(ctx, sql, userID, userEducationYear)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "tpportal: unable to check if user_profile_subjects exists")
	}

	return exists, nil
}

// Exists checks if the UserProfileSubject row exists.
func (o *UserProfileSubject) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserProfileSubjectExists(ctx, exec, o.UserID, o.UserEducationYear)
}
