// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package tpportal

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ForeignLanguage is an object representing the database table.
type ForeignLanguage struct {
	ID   int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *foreignLanguageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L foreignLanguageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ForeignLanguageColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var ForeignLanguageTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "foreign_languages.id",
	Name: "foreign_languages.name",
}

// Generated where

var ForeignLanguageWhere = struct {
	ID   whereHelperint64
	Name whereHelperstring
}{
	ID:   whereHelperint64{field: "\"foreign_languages\".\"id\""},
	Name: whereHelperstring{field: "\"foreign_languages\".\"name\""},
}

// ForeignLanguageRels is where relationship names are stored.
var ForeignLanguageRels = struct {
	UserForeignLanguages string
}{
	UserForeignLanguages: "UserForeignLanguages",
}

// foreignLanguageR is where relationships are stored.
type foreignLanguageR struct {
	UserForeignLanguages UserForeignLanguageSlice `boil:"UserForeignLanguages" json:"UserForeignLanguages" toml:"UserForeignLanguages" yaml:"UserForeignLanguages"`
}

// NewStruct creates a new relationship struct
func (*foreignLanguageR) NewStruct() *foreignLanguageR {
	return &foreignLanguageR{}
}

func (r *foreignLanguageR) GetUserForeignLanguages() UserForeignLanguageSlice {
	if r == nil {
		return nil
	}
	return r.UserForeignLanguages
}

// foreignLanguageL is where Load methods for each relationship are stored.
type foreignLanguageL struct{}

var (
	foreignLanguageAllColumns            = []string{"id", "name"}
	foreignLanguageColumnsWithoutDefault = []string{"name"}
	foreignLanguageColumnsWithDefault    = []string{"id"}
	foreignLanguagePrimaryKeyColumns     = []string{"id"}
	foreignLanguageGeneratedColumns      = []string{}
)

type (
	// ForeignLanguageSlice is an alias for a slice of pointers to ForeignLanguage.
	// This should almost always be used instead of []ForeignLanguage.
	ForeignLanguageSlice []*ForeignLanguage
	// ForeignLanguageHook is the signature for custom ForeignLanguage hook methods
	ForeignLanguageHook func(context.Context, boil.ContextExecutor, *ForeignLanguage) error

	foreignLanguageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	foreignLanguageType                 = reflect.TypeOf(&ForeignLanguage{})
	foreignLanguageMapping              = queries.MakeStructMapping(foreignLanguageType)
	foreignLanguagePrimaryKeyMapping, _ = queries.BindMapping(foreignLanguageType, foreignLanguageMapping, foreignLanguagePrimaryKeyColumns)
	foreignLanguageInsertCacheMut       sync.RWMutex
	foreignLanguageInsertCache          = make(map[string]insertCache)
	foreignLanguageUpdateCacheMut       sync.RWMutex
	foreignLanguageUpdateCache          = make(map[string]updateCache)
	foreignLanguageUpsertCacheMut       sync.RWMutex
	foreignLanguageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var foreignLanguageAfterSelectHooks []ForeignLanguageHook

var foreignLanguageBeforeInsertHooks []ForeignLanguageHook
var foreignLanguageAfterInsertHooks []ForeignLanguageHook

var foreignLanguageBeforeUpdateHooks []ForeignLanguageHook
var foreignLanguageAfterUpdateHooks []ForeignLanguageHook

var foreignLanguageBeforeDeleteHooks []ForeignLanguageHook
var foreignLanguageAfterDeleteHooks []ForeignLanguageHook

var foreignLanguageBeforeUpsertHooks []ForeignLanguageHook
var foreignLanguageAfterUpsertHooks []ForeignLanguageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ForeignLanguage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range foreignLanguageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ForeignLanguage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range foreignLanguageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ForeignLanguage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range foreignLanguageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ForeignLanguage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range foreignLanguageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ForeignLanguage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range foreignLanguageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ForeignLanguage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range foreignLanguageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ForeignLanguage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range foreignLanguageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ForeignLanguage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range foreignLanguageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ForeignLanguage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range foreignLanguageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddForeignLanguageHook registers your hook function for all future operations.
func AddForeignLanguageHook(hookPoint boil.HookPoint, foreignLanguageHook ForeignLanguageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		foreignLanguageAfterSelectHooks = append(foreignLanguageAfterSelectHooks, foreignLanguageHook)
	case boil.BeforeInsertHook:
		foreignLanguageBeforeInsertHooks = append(foreignLanguageBeforeInsertHooks, foreignLanguageHook)
	case boil.AfterInsertHook:
		foreignLanguageAfterInsertHooks = append(foreignLanguageAfterInsertHooks, foreignLanguageHook)
	case boil.BeforeUpdateHook:
		foreignLanguageBeforeUpdateHooks = append(foreignLanguageBeforeUpdateHooks, foreignLanguageHook)
	case boil.AfterUpdateHook:
		foreignLanguageAfterUpdateHooks = append(foreignLanguageAfterUpdateHooks, foreignLanguageHook)
	case boil.BeforeDeleteHook:
		foreignLanguageBeforeDeleteHooks = append(foreignLanguageBeforeDeleteHooks, foreignLanguageHook)
	case boil.AfterDeleteHook:
		foreignLanguageAfterDeleteHooks = append(foreignLanguageAfterDeleteHooks, foreignLanguageHook)
	case boil.BeforeUpsertHook:
		foreignLanguageBeforeUpsertHooks = append(foreignLanguageBeforeUpsertHooks, foreignLanguageHook)
	case boil.AfterUpsertHook:
		foreignLanguageAfterUpsertHooks = append(foreignLanguageAfterUpsertHooks, foreignLanguageHook)
	}
}

// One returns a single foreignLanguage record from the query.
func (q foreignLanguageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ForeignLanguage, error) {
	o := &ForeignLanguage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "tpportal: failed to execute a one query for foreign_languages")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ForeignLanguage records from the query.
func (q foreignLanguageQuery) All(ctx context.Context, exec boil.ContextExecutor) (ForeignLanguageSlice, error) {
	var o []*ForeignLanguage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "tpportal: failed to assign all query results to ForeignLanguage slice")
	}

	if len(foreignLanguageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ForeignLanguage records in the query.
func (q foreignLanguageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to count foreign_languages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q foreignLanguageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "tpportal: failed to check if foreign_languages exists")
	}

	return count > 0, nil
}

// UserForeignLanguages retrieves all the user_foreign_language's UserForeignLanguages with an executor.
func (o *ForeignLanguage) UserForeignLanguages(mods ...qm.QueryMod) userForeignLanguageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_foreign_languages\".\"foreign_language_id\"=?", o.ID),
	)

	return UserForeignLanguages(queryMods...)
}

// LoadUserForeignLanguages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (foreignLanguageL) LoadUserForeignLanguages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeForeignLanguage interface{}, mods queries.Applicator) error {
	var slice []*ForeignLanguage
	var object *ForeignLanguage

	if singular {
		var ok bool
		object, ok = maybeForeignLanguage.(*ForeignLanguage)
		if !ok {
			object = new(ForeignLanguage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeForeignLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeForeignLanguage))
			}
		}
	} else {
		s, ok := maybeForeignLanguage.(*[]*ForeignLanguage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeForeignLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeForeignLanguage))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &foreignLanguageR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &foreignLanguageR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_foreign_languages`),
		qm.WhereIn(`user_foreign_languages.foreign_language_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_foreign_languages")
	}

	var resultSlice []*UserForeignLanguage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_foreign_languages")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_foreign_languages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_foreign_languages")
	}

	if len(userForeignLanguageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserForeignLanguages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userForeignLanguageR{}
			}
			foreign.R.ForeignLanguage = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ForeignLanguageID) {
				local.R.UserForeignLanguages = append(local.R.UserForeignLanguages, foreign)
				if foreign.R == nil {
					foreign.R = &userForeignLanguageR{}
				}
				foreign.R.ForeignLanguage = local
				break
			}
		}
	}

	return nil
}

// AddUserForeignLanguages adds the given related objects to the existing relationships
// of the foreign_language, optionally inserting them as new records.
// Appends related to o.R.UserForeignLanguages.
// Sets related.R.ForeignLanguage appropriately.
func (o *ForeignLanguage) AddUserForeignLanguages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserForeignLanguage) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ForeignLanguageID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_foreign_languages\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"foreign_language_id"}),
				strmangle.WhereClause("\"", "\"", 2, userForeignLanguagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserID, rel.UserEducationYear}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ForeignLanguageID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &foreignLanguageR{
			UserForeignLanguages: related,
		}
	} else {
		o.R.UserForeignLanguages = append(o.R.UserForeignLanguages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userForeignLanguageR{
				ForeignLanguage: o,
			}
		} else {
			rel.R.ForeignLanguage = o
		}
	}
	return nil
}

// SetUserForeignLanguages removes all previously related items of the
// foreign_language replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ForeignLanguage's UserForeignLanguages accordingly.
// Replaces o.R.UserForeignLanguages with related.
// Sets related.R.ForeignLanguage's UserForeignLanguages accordingly.
func (o *ForeignLanguage) SetUserForeignLanguages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserForeignLanguage) error {
	query := "update \"user_foreign_languages\" set \"foreign_language_id\" = null where \"foreign_language_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UserForeignLanguages {
			queries.SetScanner(&rel.ForeignLanguageID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ForeignLanguage = nil
		}
		o.R.UserForeignLanguages = nil
	}

	return o.AddUserForeignLanguages(ctx, exec, insert, related...)
}

// RemoveUserForeignLanguages relationships from objects passed in.
// Removes related items from R.UserForeignLanguages (uses pointer comparison, removal does not keep order)
// Sets related.R.ForeignLanguage.
func (o *ForeignLanguage) RemoveUserForeignLanguages(ctx context.Context, exec boil.ContextExecutor, related ...*UserForeignLanguage) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ForeignLanguageID, nil)
		if rel.R != nil {
			rel.R.ForeignLanguage = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("foreign_language_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UserForeignLanguages {
			if rel != ri {
				continue
			}

			ln := len(o.R.UserForeignLanguages)
			if ln > 1 && i < ln-1 {
				o.R.UserForeignLanguages[i] = o.R.UserForeignLanguages[ln-1]
			}
			o.R.UserForeignLanguages = o.R.UserForeignLanguages[:ln-1]
			break
		}
	}

	return nil
}

// ForeignLanguages retrieves all the records using an executor.
func ForeignLanguages(mods ...qm.QueryMod) foreignLanguageQuery {
	mods = append(mods, qm.From("\"foreign_languages\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"foreign_languages\".*"})
	}

	return foreignLanguageQuery{q}
}

// FindForeignLanguage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindForeignLanguage(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ForeignLanguage, error) {
	foreignLanguageObj := &ForeignLanguage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"foreign_languages\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, foreignLanguageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "tpportal: unable to select from foreign_languages")
	}

	if err = foreignLanguageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return foreignLanguageObj, err
	}

	return foreignLanguageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ForeignLanguage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("tpportal: no foreign_languages provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(foreignLanguageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	foreignLanguageInsertCacheMut.RLock()
	cache, cached := foreignLanguageInsertCache[key]
	foreignLanguageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			foreignLanguageAllColumns,
			foreignLanguageColumnsWithDefault,
			foreignLanguageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(foreignLanguageType, foreignLanguageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(foreignLanguageType, foreignLanguageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"foreign_languages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"foreign_languages\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "tpportal: unable to insert into foreign_languages")
	}

	if !cached {
		foreignLanguageInsertCacheMut.Lock()
		foreignLanguageInsertCache[key] = cache
		foreignLanguageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ForeignLanguage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ForeignLanguage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	foreignLanguageUpdateCacheMut.RLock()
	cache, cached := foreignLanguageUpdateCache[key]
	foreignLanguageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			foreignLanguageAllColumns,
			foreignLanguagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("tpportal: unable to update foreign_languages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"foreign_languages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, foreignLanguagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(foreignLanguageType, foreignLanguageMapping, append(wl, foreignLanguagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update foreign_languages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by update for foreign_languages")
	}

	if !cached {
		foreignLanguageUpdateCacheMut.Lock()
		foreignLanguageUpdateCache[key] = cache
		foreignLanguageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q foreignLanguageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update all for foreign_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to retrieve rows affected for foreign_languages")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ForeignLanguageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("tpportal: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), foreignLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"foreign_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, foreignLanguagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update all in foreignLanguage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to retrieve rows affected all in update all foreignLanguage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ForeignLanguage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("tpportal: no foreign_languages provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(foreignLanguageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	foreignLanguageUpsertCacheMut.RLock()
	cache, cached := foreignLanguageUpsertCache[key]
	foreignLanguageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			foreignLanguageAllColumns,
			foreignLanguageColumnsWithDefault,
			foreignLanguageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			foreignLanguageAllColumns,
			foreignLanguagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("tpportal: unable to upsert foreign_languages, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(foreignLanguagePrimaryKeyColumns))
			copy(conflict, foreignLanguagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"foreign_languages\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(foreignLanguageType, foreignLanguageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(foreignLanguageType, foreignLanguageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "tpportal: unable to upsert foreign_languages")
	}

	if !cached {
		foreignLanguageUpsertCacheMut.Lock()
		foreignLanguageUpsertCache[key] = cache
		foreignLanguageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ForeignLanguage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ForeignLanguage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("tpportal: no ForeignLanguage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), foreignLanguagePrimaryKeyMapping)
	sql := "DELETE FROM \"foreign_languages\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete from foreign_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by delete for foreign_languages")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q foreignLanguageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("tpportal: no foreignLanguageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete all from foreign_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by deleteall for foreign_languages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ForeignLanguageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(foreignLanguageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), foreignLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"foreign_languages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, foreignLanguagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete all from foreignLanguage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by deleteall for foreign_languages")
	}

	if len(foreignLanguageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ForeignLanguage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindForeignLanguage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ForeignLanguageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ForeignLanguageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), foreignLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"foreign_languages\".* FROM \"foreign_languages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, foreignLanguagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "tpportal: unable to reload all in ForeignLanguageSlice")
	}

	*o = slice

	return nil
}

// ForeignLanguageExists checks if the ForeignLanguage row exists.
func ForeignLanguageExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"foreign_languages\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "tpportal: unable to check if foreign_languages exists")
	}

	return exists, nil
}

// Exists checks if the ForeignLanguage row exists.
func (o *ForeignLanguage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ForeignLanguageExists(ctx, exec, o.ID)
}
