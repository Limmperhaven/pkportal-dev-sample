// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package tpportal

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Profile is an object representing the database table.
type Profile struct {
	ID            int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name          string `boil:"name" json:"name" toml:"name" yaml:"name"`
	EducationYear int16  `boil:"education_year" json:"education_year" toml:"education_year" yaml:"education_year"`

	R *profileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L profileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProfileColumns = struct {
	ID            string
	Name          string
	EducationYear string
}{
	ID:            "id",
	Name:          "name",
	EducationYear: "education_year",
}

var ProfileTableColumns = struct {
	ID            string
	Name          string
	EducationYear string
}{
	ID:            "profiles.id",
	Name:          "profiles.name",
	EducationYear: "profiles.education_year",
}

// Generated where

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ProfileWhere = struct {
	ID            whereHelperint64
	Name          whereHelperstring
	EducationYear whereHelperint16
}{
	ID:            whereHelperint64{field: "\"profiles\".\"id\""},
	Name:          whereHelperstring{field: "\"profiles\".\"name\""},
	EducationYear: whereHelperint16{field: "\"profiles\".\"education_year\""},
}

// ProfileRels is where relationship names are stored.
var ProfileRels = struct {
	Subjects                  string
	FirstProfileUserProfiles  string
	SecondProfileUserProfiles string
}{
	Subjects:                  "Subjects",
	FirstProfileUserProfiles:  "FirstProfileUserProfiles",
	SecondProfileUserProfiles: "SecondProfileUserProfiles",
}

// profileR is where relationships are stored.
type profileR struct {
	Subjects                  SubjectSlice     `boil:"Subjects" json:"Subjects" toml:"Subjects" yaml:"Subjects"`
	FirstProfileUserProfiles  UserProfileSlice `boil:"FirstProfileUserProfiles" json:"FirstProfileUserProfiles" toml:"FirstProfileUserProfiles" yaml:"FirstProfileUserProfiles"`
	SecondProfileUserProfiles UserProfileSlice `boil:"SecondProfileUserProfiles" json:"SecondProfileUserProfiles" toml:"SecondProfileUserProfiles" yaml:"SecondProfileUserProfiles"`
}

// NewStruct creates a new relationship struct
func (*profileR) NewStruct() *profileR {
	return &profileR{}
}

func (r *profileR) GetSubjects() SubjectSlice {
	if r == nil {
		return nil
	}
	return r.Subjects
}

func (r *profileR) GetFirstProfileUserProfiles() UserProfileSlice {
	if r == nil {
		return nil
	}
	return r.FirstProfileUserProfiles
}

func (r *profileR) GetSecondProfileUserProfiles() UserProfileSlice {
	if r == nil {
		return nil
	}
	return r.SecondProfileUserProfiles
}

// profileL is where Load methods for each relationship are stored.
type profileL struct{}

var (
	profileAllColumns            = []string{"id", "name", "education_year"}
	profileColumnsWithoutDefault = []string{"name", "education_year"}
	profileColumnsWithDefault    = []string{"id"}
	profilePrimaryKeyColumns     = []string{"id"}
	profileGeneratedColumns      = []string{}
)

type (
	// ProfileSlice is an alias for a slice of pointers to Profile.
	// This should almost always be used instead of []Profile.
	ProfileSlice []*Profile
	// ProfileHook is the signature for custom Profile hook methods
	ProfileHook func(context.Context, boil.ContextExecutor, *Profile) error

	profileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	profileType                 = reflect.TypeOf(&Profile{})
	profileMapping              = queries.MakeStructMapping(profileType)
	profilePrimaryKeyMapping, _ = queries.BindMapping(profileType, profileMapping, profilePrimaryKeyColumns)
	profileInsertCacheMut       sync.RWMutex
	profileInsertCache          = make(map[string]insertCache)
	profileUpdateCacheMut       sync.RWMutex
	profileUpdateCache          = make(map[string]updateCache)
	profileUpsertCacheMut       sync.RWMutex
	profileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var profileAfterSelectHooks []ProfileHook

var profileBeforeInsertHooks []ProfileHook
var profileAfterInsertHooks []ProfileHook

var profileBeforeUpdateHooks []ProfileHook
var profileAfterUpdateHooks []ProfileHook

var profileBeforeDeleteHooks []ProfileHook
var profileAfterDeleteHooks []ProfileHook

var profileBeforeUpsertHooks []ProfileHook
var profileAfterUpsertHooks []ProfileHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Profile) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Profile) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Profile) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Profile) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Profile) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Profile) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Profile) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Profile) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Profile) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProfileHook registers your hook function for all future operations.
func AddProfileHook(hookPoint boil.HookPoint, profileHook ProfileHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		profileAfterSelectHooks = append(profileAfterSelectHooks, profileHook)
	case boil.BeforeInsertHook:
		profileBeforeInsertHooks = append(profileBeforeInsertHooks, profileHook)
	case boil.AfterInsertHook:
		profileAfterInsertHooks = append(profileAfterInsertHooks, profileHook)
	case boil.BeforeUpdateHook:
		profileBeforeUpdateHooks = append(profileBeforeUpdateHooks, profileHook)
	case boil.AfterUpdateHook:
		profileAfterUpdateHooks = append(profileAfterUpdateHooks, profileHook)
	case boil.BeforeDeleteHook:
		profileBeforeDeleteHooks = append(profileBeforeDeleteHooks, profileHook)
	case boil.AfterDeleteHook:
		profileAfterDeleteHooks = append(profileAfterDeleteHooks, profileHook)
	case boil.BeforeUpsertHook:
		profileBeforeUpsertHooks = append(profileBeforeUpsertHooks, profileHook)
	case boil.AfterUpsertHook:
		profileAfterUpsertHooks = append(profileAfterUpsertHooks, profileHook)
	}
}

// One returns a single profile record from the query.
func (q profileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Profile, error) {
	o := &Profile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "tpportal: failed to execute a one query for profiles")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Profile records from the query.
func (q profileQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProfileSlice, error) {
	var o []*Profile

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "tpportal: failed to assign all query results to Profile slice")
	}

	if len(profileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Profile records in the query.
func (q profileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to count profiles rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q profileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "tpportal: failed to check if profiles exists")
	}

	return count > 0, nil
}

// Subjects retrieves all the subject's Subjects with an executor.
func (o *Profile) Subjects(mods ...qm.QueryMod) subjectQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"profile_subjects\" on \"subjects\".\"id\" = \"profile_subjects\".\"subject_id\""),
		qm.Where("\"profile_subjects\".\"profile_id\"=?", o.ID),
	)

	return Subjects(queryMods...)
}

// FirstProfileUserProfiles retrieves all the user_profile's UserProfiles with an executor via first_profile_id column.
func (o *Profile) FirstProfileUserProfiles(mods ...qm.QueryMod) userProfileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_profiles\".\"first_profile_id\"=?", o.ID),
	)

	return UserProfiles(queryMods...)
}

// SecondProfileUserProfiles retrieves all the user_profile's UserProfiles with an executor via second_profile_id column.
func (o *Profile) SecondProfileUserProfiles(mods ...qm.QueryMod) userProfileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_profiles\".\"second_profile_id\"=?", o.ID),
	)

	return UserProfiles(queryMods...)
}

// LoadSubjects allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileL) LoadSubjects(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProfile interface{}, mods queries.Applicator) error {
	var slice []*Profile
	var object *Profile

	if singular {
		var ok bool
		object, ok = maybeProfile.(*Profile)
		if !ok {
			object = new(Profile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProfile))
			}
		}
	} else {
		s, ok := maybeProfile.(*[]*Profile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProfile))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"subjects\".\"id\", \"subjects\".\"name\", \"a\".\"profile_id\""),
		qm.From("\"subjects\""),
		qm.InnerJoin("\"profile_subjects\" as \"a\" on \"subjects\".\"id\" = \"a\".\"subject_id\""),
		qm.WhereIn("\"a\".\"profile_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subjects")
	}

	var resultSlice []*Subject

	var localJoinCols []int64
	for results.Next() {
		one := new(Subject)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for subjects")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice subjects")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subjects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subjects")
	}

	if len(subjectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Subjects = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subjectR{}
			}
			foreign.R.Profiles = append(foreign.R.Profiles, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Subjects = append(local.R.Subjects, foreign)
				if foreign.R == nil {
					foreign.R = &subjectR{}
				}
				foreign.R.Profiles = append(foreign.R.Profiles, local)
				break
			}
		}
	}

	return nil
}

// LoadFirstProfileUserProfiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileL) LoadFirstProfileUserProfiles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProfile interface{}, mods queries.Applicator) error {
	var slice []*Profile
	var object *Profile

	if singular {
		var ok bool
		object, ok = maybeProfile.(*Profile)
		if !ok {
			object = new(Profile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProfile))
			}
		}
	} else {
		s, ok := maybeProfile.(*[]*Profile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProfile))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_profiles`),
		qm.WhereIn(`user_profiles.first_profile_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_profiles")
	}

	var resultSlice []*UserProfile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_profiles")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_profiles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_profiles")
	}

	if len(userProfileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FirstProfileUserProfiles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userProfileR{}
			}
			foreign.R.FirstProfile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.FirstProfileID) {
				local.R.FirstProfileUserProfiles = append(local.R.FirstProfileUserProfiles, foreign)
				if foreign.R == nil {
					foreign.R = &userProfileR{}
				}
				foreign.R.FirstProfile = local
				break
			}
		}
	}

	return nil
}

// LoadSecondProfileUserProfiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileL) LoadSecondProfileUserProfiles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProfile interface{}, mods queries.Applicator) error {
	var slice []*Profile
	var object *Profile

	if singular {
		var ok bool
		object, ok = maybeProfile.(*Profile)
		if !ok {
			object = new(Profile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProfile))
			}
		}
	} else {
		s, ok := maybeProfile.(*[]*Profile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProfile))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_profiles`),
		qm.WhereIn(`user_profiles.second_profile_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_profiles")
	}

	var resultSlice []*UserProfile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_profiles")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_profiles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_profiles")
	}

	if len(userProfileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SecondProfileUserProfiles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userProfileR{}
			}
			foreign.R.SecondProfile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SecondProfileID) {
				local.R.SecondProfileUserProfiles = append(local.R.SecondProfileUserProfiles, foreign)
				if foreign.R == nil {
					foreign.R = &userProfileR{}
				}
				foreign.R.SecondProfile = local
				break
			}
		}
	}

	return nil
}

// AddSubjects adds the given related objects to the existing relationships
// of the profile, optionally inserting them as new records.
// Appends related to o.R.Subjects.
// Sets related.R.Profiles appropriately.
func (o *Profile) AddSubjects(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Subject) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"profile_subjects\" (\"profile_id\", \"subject_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &profileR{
			Subjects: related,
		}
	} else {
		o.R.Subjects = append(o.R.Subjects, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subjectR{
				Profiles: ProfileSlice{o},
			}
		} else {
			rel.R.Profiles = append(rel.R.Profiles, o)
		}
	}
	return nil
}

// SetSubjects removes all previously related items of the
// profile replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Profiles's Subjects accordingly.
// Replaces o.R.Subjects with related.
// Sets related.R.Profiles's Subjects accordingly.
func (o *Profile) SetSubjects(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Subject) error {
	query := "delete from \"profile_subjects\" where \"profile_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeSubjectsFromProfilesSlice(o, related)
	if o.R != nil {
		o.R.Subjects = nil
	}

	return o.AddSubjects(ctx, exec, insert, related...)
}

// RemoveSubjects relationships from objects passed in.
// Removes related items from R.Subjects (uses pointer comparison, removal does not keep order)
// Sets related.R.Profiles.
func (o *Profile) RemoveSubjects(ctx context.Context, exec boil.ContextExecutor, related ...*Subject) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"profile_subjects\" where \"profile_id\" = $1 and \"subject_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeSubjectsFromProfilesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Subjects {
			if rel != ri {
				continue
			}

			ln := len(o.R.Subjects)
			if ln > 1 && i < ln-1 {
				o.R.Subjects[i] = o.R.Subjects[ln-1]
			}
			o.R.Subjects = o.R.Subjects[:ln-1]
			break
		}
	}

	return nil
}

func removeSubjectsFromProfilesSlice(o *Profile, related []*Subject) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Profiles {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Profiles)
			if ln > 1 && i < ln-1 {
				rel.R.Profiles[i] = rel.R.Profiles[ln-1]
			}
			rel.R.Profiles = rel.R.Profiles[:ln-1]
			break
		}
	}
}

// AddFirstProfileUserProfiles adds the given related objects to the existing relationships
// of the profile, optionally inserting them as new records.
// Appends related to o.R.FirstProfileUserProfiles.
// Sets related.R.FirstProfile appropriately.
func (o *Profile) AddFirstProfileUserProfiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserProfile) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FirstProfileID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_profiles\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"first_profile_id"}),
				strmangle.WhereClause("\"", "\"", 2, userProfilePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserID, rel.UserEducationYear}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FirstProfileID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &profileR{
			FirstProfileUserProfiles: related,
		}
	} else {
		o.R.FirstProfileUserProfiles = append(o.R.FirstProfileUserProfiles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userProfileR{
				FirstProfile: o,
			}
		} else {
			rel.R.FirstProfile = o
		}
	}
	return nil
}

// SetFirstProfileUserProfiles removes all previously related items of the
// profile replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.FirstProfile's FirstProfileUserProfiles accordingly.
// Replaces o.R.FirstProfileUserProfiles with related.
// Sets related.R.FirstProfile's FirstProfileUserProfiles accordingly.
func (o *Profile) SetFirstProfileUserProfiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserProfile) error {
	query := "update \"user_profiles\" set \"first_profile_id\" = null where \"first_profile_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.FirstProfileUserProfiles {
			queries.SetScanner(&rel.FirstProfileID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.FirstProfile = nil
		}
		o.R.FirstProfileUserProfiles = nil
	}

	return o.AddFirstProfileUserProfiles(ctx, exec, insert, related...)
}

// RemoveFirstProfileUserProfiles relationships from objects passed in.
// Removes related items from R.FirstProfileUserProfiles (uses pointer comparison, removal does not keep order)
// Sets related.R.FirstProfile.
func (o *Profile) RemoveFirstProfileUserProfiles(ctx context.Context, exec boil.ContextExecutor, related ...*UserProfile) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.FirstProfileID, nil)
		if rel.R != nil {
			rel.R.FirstProfile = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("first_profile_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.FirstProfileUserProfiles {
			if rel != ri {
				continue
			}

			ln := len(o.R.FirstProfileUserProfiles)
			if ln > 1 && i < ln-1 {
				o.R.FirstProfileUserProfiles[i] = o.R.FirstProfileUserProfiles[ln-1]
			}
			o.R.FirstProfileUserProfiles = o.R.FirstProfileUserProfiles[:ln-1]
			break
		}
	}

	return nil
}

// AddSecondProfileUserProfiles adds the given related objects to the existing relationships
// of the profile, optionally inserting them as new records.
// Appends related to o.R.SecondProfileUserProfiles.
// Sets related.R.SecondProfile appropriately.
func (o *Profile) AddSecondProfileUserProfiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserProfile) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SecondProfileID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_profiles\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"second_profile_id"}),
				strmangle.WhereClause("\"", "\"", 2, userProfilePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserID, rel.UserEducationYear}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SecondProfileID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &profileR{
			SecondProfileUserProfiles: related,
		}
	} else {
		o.R.SecondProfileUserProfiles = append(o.R.SecondProfileUserProfiles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userProfileR{
				SecondProfile: o,
			}
		} else {
			rel.R.SecondProfile = o
		}
	}
	return nil
}

// SetSecondProfileUserProfiles removes all previously related items of the
// profile replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SecondProfile's SecondProfileUserProfiles accordingly.
// Replaces o.R.SecondProfileUserProfiles with related.
// Sets related.R.SecondProfile's SecondProfileUserProfiles accordingly.
func (o *Profile) SetSecondProfileUserProfiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserProfile) error {
	query := "update \"user_profiles\" set \"second_profile_id\" = null where \"second_profile_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SecondProfileUserProfiles {
			queries.SetScanner(&rel.SecondProfileID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SecondProfile = nil
		}
		o.R.SecondProfileUserProfiles = nil
	}

	return o.AddSecondProfileUserProfiles(ctx, exec, insert, related...)
}

// RemoveSecondProfileUserProfiles relationships from objects passed in.
// Removes related items from R.SecondProfileUserProfiles (uses pointer comparison, removal does not keep order)
// Sets related.R.SecondProfile.
func (o *Profile) RemoveSecondProfileUserProfiles(ctx context.Context, exec boil.ContextExecutor, related ...*UserProfile) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SecondProfileID, nil)
		if rel.R != nil {
			rel.R.SecondProfile = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("second_profile_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SecondProfileUserProfiles {
			if rel != ri {
				continue
			}

			ln := len(o.R.SecondProfileUserProfiles)
			if ln > 1 && i < ln-1 {
				o.R.SecondProfileUserProfiles[i] = o.R.SecondProfileUserProfiles[ln-1]
			}
			o.R.SecondProfileUserProfiles = o.R.SecondProfileUserProfiles[:ln-1]
			break
		}
	}

	return nil
}

// Profiles retrieves all the records using an executor.
func Profiles(mods ...qm.QueryMod) profileQuery {
	mods = append(mods, qm.From("\"profiles\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"profiles\".*"})
	}

	return profileQuery{q}
}

// FindProfile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProfile(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Profile, error) {
	profileObj := &Profile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"profiles\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, profileObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "tpportal: unable to select from profiles")
	}

	if err = profileObj.doAfterSelectHooks(ctx, exec); err != nil {
		return profileObj, err
	}

	return profileObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Profile) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("tpportal: no profiles provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(profileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	profileInsertCacheMut.RLock()
	cache, cached := profileInsertCache[key]
	profileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			profileAllColumns,
			profileColumnsWithDefault,
			profileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(profileType, profileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(profileType, profileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"profiles\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"profiles\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "tpportal: unable to insert into profiles")
	}

	if !cached {
		profileInsertCacheMut.Lock()
		profileInsertCache[key] = cache
		profileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Profile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Profile) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	profileUpdateCacheMut.RLock()
	cache, cached := profileUpdateCache[key]
	profileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			profileAllColumns,
			profilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("tpportal: unable to update profiles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"profiles\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, profilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(profileType, profileMapping, append(wl, profilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update profiles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by update for profiles")
	}

	if !cached {
		profileUpdateCacheMut.Lock()
		profileUpdateCache[key] = cache
		profileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q profileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update all for profiles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to retrieve rows affected for profiles")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProfileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("tpportal: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"profiles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, profilePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update all in profile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to retrieve rows affected all in update all profile")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Profile) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("tpportal: no profiles provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(profileColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	profileUpsertCacheMut.RLock()
	cache, cached := profileUpsertCache[key]
	profileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			profileAllColumns,
			profileColumnsWithDefault,
			profileColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			profileAllColumns,
			profilePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("tpportal: unable to upsert profiles, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(profilePrimaryKeyColumns))
			copy(conflict, profilePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"profiles\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(profileType, profileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(profileType, profileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "tpportal: unable to upsert profiles")
	}

	if !cached {
		profileUpsertCacheMut.Lock()
		profileUpsertCache[key] = cache
		profileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Profile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Profile) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("tpportal: no Profile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), profilePrimaryKeyMapping)
	sql := "DELETE FROM \"profiles\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete from profiles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by delete for profiles")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q profileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("tpportal: no profileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete all from profiles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by deleteall for profiles")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProfileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(profileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"profiles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, profilePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete all from profile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by deleteall for profiles")
	}

	if len(profileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Profile) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProfile(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProfileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProfileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"profiles\".* FROM \"profiles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, profilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "tpportal: unable to reload all in ProfileSlice")
	}

	*o = slice

	return nil
}

// ProfileExists checks if the Profile row exists.
func ProfileExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"profiles\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "tpportal: unable to check if profiles exists")
	}

	return exists, nil
}

// Exists checks if the Profile row exists.
func (o *Profile) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProfileExists(ctx, exec, o.ID)
}
