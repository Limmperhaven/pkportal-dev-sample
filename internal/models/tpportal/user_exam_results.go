// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package tpportal

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserExamResult is an object representing the database table.
type UserExamResult struct {
	UserID               int64    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	TestDateID           int64    `boil:"test_date_id" json:"test_date_id" toml:"test_date_id" yaml:"test_date_id"`
	EducationYear        int16    `boil:"education_year" json:"education_year" toml:"education_year" yaml:"education_year"`
	RussianLanguageGrade null.Int `boil:"russian_language_grade" json:"russian_language_grade,omitempty" toml:"russian_language_grade" yaml:"russian_language_grade,omitempty"`
	MathGrade            null.Int `boil:"math_grade" json:"math_grade,omitempty" toml:"math_grade" yaml:"math_grade,omitempty"`
	ForeignLanguageGrade null.Int `boil:"foreign_language_grade" json:"foreign_language_grade,omitempty" toml:"foreign_language_grade" yaml:"foreign_language_grade,omitempty"`
	FirstProfileGrade    null.Int `boil:"first_profile_grade" json:"first_profile_grade,omitempty" toml:"first_profile_grade" yaml:"first_profile_grade,omitempty"`
	SecondProfileGrade   null.Int `boil:"second_profile_grade" json:"second_profile_grade,omitempty" toml:"second_profile_grade" yaml:"second_profile_grade,omitempty"`

	R *userExamResultR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userExamResultL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserExamResultColumns = struct {
	UserID               string
	TestDateID           string
	EducationYear        string
	RussianLanguageGrade string
	MathGrade            string
	ForeignLanguageGrade string
	FirstProfileGrade    string
	SecondProfileGrade   string
}{
	UserID:               "user_id",
	TestDateID:           "test_date_id",
	EducationYear:        "education_year",
	RussianLanguageGrade: "russian_language_grade",
	MathGrade:            "math_grade",
	ForeignLanguageGrade: "foreign_language_grade",
	FirstProfileGrade:    "first_profile_grade",
	SecondProfileGrade:   "second_profile_grade",
}

var UserExamResultTableColumns = struct {
	UserID               string
	TestDateID           string
	EducationYear        string
	RussianLanguageGrade string
	MathGrade            string
	ForeignLanguageGrade string
	FirstProfileGrade    string
	SecondProfileGrade   string
}{
	UserID:               "user_exam_results.user_id",
	TestDateID:           "user_exam_results.test_date_id",
	EducationYear:        "user_exam_results.education_year",
	RussianLanguageGrade: "user_exam_results.russian_language_grade",
	MathGrade:            "user_exam_results.math_grade",
	ForeignLanguageGrade: "user_exam_results.foreign_language_grade",
	FirstProfileGrade:    "user_exam_results.first_profile_grade",
	SecondProfileGrade:   "user_exam_results.second_profile_grade",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var UserExamResultWhere = struct {
	UserID               whereHelperint64
	TestDateID           whereHelperint64
	EducationYear        whereHelperint16
	RussianLanguageGrade whereHelpernull_Int
	MathGrade            whereHelpernull_Int
	ForeignLanguageGrade whereHelpernull_Int
	FirstProfileGrade    whereHelpernull_Int
	SecondProfileGrade   whereHelpernull_Int
}{
	UserID:               whereHelperint64{field: "\"user_exam_results\".\"user_id\""},
	TestDateID:           whereHelperint64{field: "\"user_exam_results\".\"test_date_id\""},
	EducationYear:        whereHelperint16{field: "\"user_exam_results\".\"education_year\""},
	RussianLanguageGrade: whereHelpernull_Int{field: "\"user_exam_results\".\"russian_language_grade\""},
	MathGrade:            whereHelpernull_Int{field: "\"user_exam_results\".\"math_grade\""},
	ForeignLanguageGrade: whereHelpernull_Int{field: "\"user_exam_results\".\"foreign_language_grade\""},
	FirstProfileGrade:    whereHelpernull_Int{field: "\"user_exam_results\".\"first_profile_grade\""},
	SecondProfileGrade:   whereHelpernull_Int{field: "\"user_exam_results\".\"second_profile_grade\""},
}

// UserExamResultRels is where relationship names are stored.
var UserExamResultRels = struct {
	TestDate string
	User     string
}{
	TestDate: "TestDate",
	User:     "User",
}

// userExamResultR is where relationships are stored.
type userExamResultR struct {
	TestDate *TestDate `boil:"TestDate" json:"TestDate" toml:"TestDate" yaml:"TestDate"`
	User     *User     `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userExamResultR) NewStruct() *userExamResultR {
	return &userExamResultR{}
}

func (r *userExamResultR) GetTestDate() *TestDate {
	if r == nil {
		return nil
	}
	return r.TestDate
}

func (r *userExamResultR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userExamResultL is where Load methods for each relationship are stored.
type userExamResultL struct{}

var (
	userExamResultAllColumns            = []string{"user_id", "test_date_id", "education_year", "russian_language_grade", "math_grade", "foreign_language_grade", "first_profile_grade", "second_profile_grade"}
	userExamResultColumnsWithoutDefault = []string{"user_id", "test_date_id", "education_year"}
	userExamResultColumnsWithDefault    = []string{"russian_language_grade", "math_grade", "foreign_language_grade", "first_profile_grade", "second_profile_grade"}
	userExamResultPrimaryKeyColumns     = []string{"user_id", "test_date_id"}
	userExamResultGeneratedColumns      = []string{}
)

type (
	// UserExamResultSlice is an alias for a slice of pointers to UserExamResult.
	// This should almost always be used instead of []UserExamResult.
	UserExamResultSlice []*UserExamResult
	// UserExamResultHook is the signature for custom UserExamResult hook methods
	UserExamResultHook func(context.Context, boil.ContextExecutor, *UserExamResult) error

	userExamResultQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userExamResultType                 = reflect.TypeOf(&UserExamResult{})
	userExamResultMapping              = queries.MakeStructMapping(userExamResultType)
	userExamResultPrimaryKeyMapping, _ = queries.BindMapping(userExamResultType, userExamResultMapping, userExamResultPrimaryKeyColumns)
	userExamResultInsertCacheMut       sync.RWMutex
	userExamResultInsertCache          = make(map[string]insertCache)
	userExamResultUpdateCacheMut       sync.RWMutex
	userExamResultUpdateCache          = make(map[string]updateCache)
	userExamResultUpsertCacheMut       sync.RWMutex
	userExamResultUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userExamResultAfterSelectHooks []UserExamResultHook

var userExamResultBeforeInsertHooks []UserExamResultHook
var userExamResultAfterInsertHooks []UserExamResultHook

var userExamResultBeforeUpdateHooks []UserExamResultHook
var userExamResultAfterUpdateHooks []UserExamResultHook

var userExamResultBeforeDeleteHooks []UserExamResultHook
var userExamResultAfterDeleteHooks []UserExamResultHook

var userExamResultBeforeUpsertHooks []UserExamResultHook
var userExamResultAfterUpsertHooks []UserExamResultHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserExamResult) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userExamResultAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserExamResult) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userExamResultBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserExamResult) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userExamResultAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserExamResult) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userExamResultBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserExamResult) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userExamResultAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserExamResult) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userExamResultBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserExamResult) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userExamResultAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserExamResult) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userExamResultBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserExamResult) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userExamResultAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserExamResultHook registers your hook function for all future operations.
func AddUserExamResultHook(hookPoint boil.HookPoint, userExamResultHook UserExamResultHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userExamResultAfterSelectHooks = append(userExamResultAfterSelectHooks, userExamResultHook)
	case boil.BeforeInsertHook:
		userExamResultBeforeInsertHooks = append(userExamResultBeforeInsertHooks, userExamResultHook)
	case boil.AfterInsertHook:
		userExamResultAfterInsertHooks = append(userExamResultAfterInsertHooks, userExamResultHook)
	case boil.BeforeUpdateHook:
		userExamResultBeforeUpdateHooks = append(userExamResultBeforeUpdateHooks, userExamResultHook)
	case boil.AfterUpdateHook:
		userExamResultAfterUpdateHooks = append(userExamResultAfterUpdateHooks, userExamResultHook)
	case boil.BeforeDeleteHook:
		userExamResultBeforeDeleteHooks = append(userExamResultBeforeDeleteHooks, userExamResultHook)
	case boil.AfterDeleteHook:
		userExamResultAfterDeleteHooks = append(userExamResultAfterDeleteHooks, userExamResultHook)
	case boil.BeforeUpsertHook:
		userExamResultBeforeUpsertHooks = append(userExamResultBeforeUpsertHooks, userExamResultHook)
	case boil.AfterUpsertHook:
		userExamResultAfterUpsertHooks = append(userExamResultAfterUpsertHooks, userExamResultHook)
	}
}

// One returns a single userExamResult record from the query.
func (q userExamResultQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserExamResult, error) {
	o := &UserExamResult{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "tpportal: failed to execute a one query for user_exam_results")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserExamResult records from the query.
func (q userExamResultQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserExamResultSlice, error) {
	var o []*UserExamResult

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "tpportal: failed to assign all query results to UserExamResult slice")
	}

	if len(userExamResultAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserExamResult records in the query.
func (q userExamResultQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to count user_exam_results rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userExamResultQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "tpportal: failed to check if user_exam_results exists")
	}

	return count > 0, nil
}

// TestDate pointed to by the foreign key.
func (o *UserExamResult) TestDate(mods ...qm.QueryMod) testDateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TestDateID),
	}

	queryMods = append(queryMods, mods...)

	return TestDates(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserExamResult) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadTestDate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userExamResultL) LoadTestDate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserExamResult interface{}, mods queries.Applicator) error {
	var slice []*UserExamResult
	var object *UserExamResult

	if singular {
		var ok bool
		object, ok = maybeUserExamResult.(*UserExamResult)
		if !ok {
			object = new(UserExamResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserExamResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserExamResult))
			}
		}
	} else {
		s, ok := maybeUserExamResult.(*[]*UserExamResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserExamResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserExamResult))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userExamResultR{}
		}
		args = append(args, object.TestDateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userExamResultR{}
			}

			for _, a := range args {
				if a == obj.TestDateID {
					continue Outer
				}
			}

			args = append(args, obj.TestDateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`test_dates`),
		qm.WhereIn(`test_dates.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TestDate")
	}

	var resultSlice []*TestDate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TestDate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for test_dates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for test_dates")
	}

	if len(testDateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TestDate = foreign
		if foreign.R == nil {
			foreign.R = &testDateR{}
		}
		foreign.R.UserExamResults = append(foreign.R.UserExamResults, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TestDateID == foreign.ID {
				local.R.TestDate = foreign
				if foreign.R == nil {
					foreign.R = &testDateR{}
				}
				foreign.R.UserExamResults = append(foreign.R.UserExamResults, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userExamResultL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserExamResult interface{}, mods queries.Applicator) error {
	var slice []*UserExamResult
	var object *UserExamResult

	if singular {
		var ok bool
		object, ok = maybeUserExamResult.(*UserExamResult)
		if !ok {
			object = new(UserExamResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserExamResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserExamResult))
			}
		}
	} else {
		s, ok := maybeUserExamResult.(*[]*UserExamResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserExamResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserExamResult))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userExamResultR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userExamResultR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserExamResults = append(foreign.R.UserExamResults, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserExamResults = append(foreign.R.UserExamResults, local)
				break
			}
		}
	}

	return nil
}

// SetTestDate of the userExamResult to the related item.
// Sets o.R.TestDate to related.
// Adds o to related.R.UserExamResults.
func (o *UserExamResult) SetTestDate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TestDate) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_exam_results\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"test_date_id"}),
		strmangle.WhereClause("\"", "\"", 2, userExamResultPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.TestDateID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TestDateID = related.ID
	if o.R == nil {
		o.R = &userExamResultR{
			TestDate: related,
		}
	} else {
		o.R.TestDate = related
	}

	if related.R == nil {
		related.R = &testDateR{
			UserExamResults: UserExamResultSlice{o},
		}
	} else {
		related.R.UserExamResults = append(related.R.UserExamResults, o)
	}

	return nil
}

// SetUser of the userExamResult to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserExamResults.
func (o *UserExamResult) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_exam_results\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userExamResultPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.TestDateID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userExamResultR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserExamResults: UserExamResultSlice{o},
		}
	} else {
		related.R.UserExamResults = append(related.R.UserExamResults, o)
	}

	return nil
}

// UserExamResults retrieves all the records using an executor.
func UserExamResults(mods ...qm.QueryMod) userExamResultQuery {
	mods = append(mods, qm.From("\"user_exam_results\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_exam_results\".*"})
	}

	return userExamResultQuery{q}
}

// FindUserExamResult retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserExamResult(ctx context.Context, exec boil.ContextExecutor, userID int64, testDateID int64, selectCols ...string) (*UserExamResult, error) {
	userExamResultObj := &UserExamResult{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_exam_results\" where \"user_id\"=$1 AND \"test_date_id\"=$2", sel,
	)

	q := queries.Raw(query, userID, testDateID)

	err := q.Bind(ctx, exec, userExamResultObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "tpportal: unable to select from user_exam_results")
	}

	if err = userExamResultObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userExamResultObj, err
	}

	return userExamResultObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserExamResult) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("tpportal: no user_exam_results provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userExamResultColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userExamResultInsertCacheMut.RLock()
	cache, cached := userExamResultInsertCache[key]
	userExamResultInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userExamResultAllColumns,
			userExamResultColumnsWithDefault,
			userExamResultColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userExamResultType, userExamResultMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userExamResultType, userExamResultMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_exam_results\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_exam_results\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "tpportal: unable to insert into user_exam_results")
	}

	if !cached {
		userExamResultInsertCacheMut.Lock()
		userExamResultInsertCache[key] = cache
		userExamResultInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserExamResult.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserExamResult) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userExamResultUpdateCacheMut.RLock()
	cache, cached := userExamResultUpdateCache[key]
	userExamResultUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userExamResultAllColumns,
			userExamResultPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("tpportal: unable to update user_exam_results, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_exam_results\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userExamResultPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userExamResultType, userExamResultMapping, append(wl, userExamResultPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update user_exam_results row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by update for user_exam_results")
	}

	if !cached {
		userExamResultUpdateCacheMut.Lock()
		userExamResultUpdateCache[key] = cache
		userExamResultUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userExamResultQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update all for user_exam_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to retrieve rows affected for user_exam_results")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserExamResultSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("tpportal: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userExamResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_exam_results\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userExamResultPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update all in userExamResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to retrieve rows affected all in update all userExamResult")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserExamResult) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("tpportal: no user_exam_results provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userExamResultColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userExamResultUpsertCacheMut.RLock()
	cache, cached := userExamResultUpsertCache[key]
	userExamResultUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userExamResultAllColumns,
			userExamResultColumnsWithDefault,
			userExamResultColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userExamResultAllColumns,
			userExamResultPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("tpportal: unable to upsert user_exam_results, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userExamResultPrimaryKeyColumns))
			copy(conflict, userExamResultPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_exam_results\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userExamResultType, userExamResultMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userExamResultType, userExamResultMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "tpportal: unable to upsert user_exam_results")
	}

	if !cached {
		userExamResultUpsertCacheMut.Lock()
		userExamResultUpsertCache[key] = cache
		userExamResultUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserExamResult record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserExamResult) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("tpportal: no UserExamResult provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userExamResultPrimaryKeyMapping)
	sql := "DELETE FROM \"user_exam_results\" WHERE \"user_id\"=$1 AND \"test_date_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete from user_exam_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by delete for user_exam_results")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userExamResultQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("tpportal: no userExamResultQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete all from user_exam_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by deleteall for user_exam_results")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserExamResultSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userExamResultBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userExamResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_exam_results\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userExamResultPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete all from userExamResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by deleteall for user_exam_results")
	}

	if len(userExamResultAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserExamResult) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserExamResult(ctx, exec, o.UserID, o.TestDateID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserExamResultSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserExamResultSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userExamResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_exam_results\".* FROM \"user_exam_results\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userExamResultPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "tpportal: unable to reload all in UserExamResultSlice")
	}

	*o = slice

	return nil
}

// UserExamResultExists checks if the UserExamResult row exists.
func UserExamResultExists(ctx context.Context, exec boil.ContextExecutor, userID int64, testDateID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_exam_results\" where \"user_id\"=$1 AND \"test_date_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, testDateID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, testDateID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "tpportal: unable to check if user_exam_results exists")
	}

	return exists, nil
}

// Exists checks if the UserExamResult row exists.
func (o *UserExamResult) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserExamResultExists(ctx, exec, o.UserID, o.TestDateID)
}
