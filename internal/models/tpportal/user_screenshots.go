// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package tpportal

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserScreenshot is an object representing the database table.
type UserScreenshot struct {
	UserID        int64          `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	EducationYear int16          `boil:"education_year" json:"education_year" toml:"education_year" yaml:"education_year"`
	OriginalName  string         `boil:"original_name" json:"original_name" toml:"original_name" yaml:"original_name"`
	FileName      string         `boil:"file_name" json:"file_name" toml:"file_name" yaml:"file_name"`
	Type          ScreenshotType `boil:"type" json:"type" toml:"type" yaml:"type"`

	R *userScreenshotR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userScreenshotL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserScreenshotColumns = struct {
	UserID        string
	EducationYear string
	OriginalName  string
	FileName      string
	Type          string
}{
	UserID:        "user_id",
	EducationYear: "education_year",
	OriginalName:  "original_name",
	FileName:      "file_name",
	Type:          "type",
}

var UserScreenshotTableColumns = struct {
	UserID        string
	EducationYear string
	OriginalName  string
	FileName      string
	Type          string
}{
	UserID:        "user_screenshots.user_id",
	EducationYear: "user_screenshots.education_year",
	OriginalName:  "user_screenshots.original_name",
	FileName:      "user_screenshots.file_name",
	Type:          "user_screenshots.type",
}

// Generated where

type whereHelperScreenshotType struct{ field string }

func (w whereHelperScreenshotType) EQ(x ScreenshotType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperScreenshotType) NEQ(x ScreenshotType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperScreenshotType) LT(x ScreenshotType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperScreenshotType) LTE(x ScreenshotType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperScreenshotType) GT(x ScreenshotType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperScreenshotType) GTE(x ScreenshotType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperScreenshotType) IN(slice []ScreenshotType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperScreenshotType) NIN(slice []ScreenshotType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var UserScreenshotWhere = struct {
	UserID        whereHelperint64
	EducationYear whereHelperint16
	OriginalName  whereHelperstring
	FileName      whereHelperstring
	Type          whereHelperScreenshotType
}{
	UserID:        whereHelperint64{field: "\"user_screenshots\".\"user_id\""},
	EducationYear: whereHelperint16{field: "\"user_screenshots\".\"education_year\""},
	OriginalName:  whereHelperstring{field: "\"user_screenshots\".\"original_name\""},
	FileName:      whereHelperstring{field: "\"user_screenshots\".\"file_name\""},
	Type:          whereHelperScreenshotType{field: "\"user_screenshots\".\"type\""},
}

// UserScreenshotRels is where relationship names are stored.
var UserScreenshotRels = struct {
	User string
}{
	User: "User",
}

// userScreenshotR is where relationships are stored.
type userScreenshotR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userScreenshotR) NewStruct() *userScreenshotR {
	return &userScreenshotR{}
}

func (r *userScreenshotR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userScreenshotL is where Load methods for each relationship are stored.
type userScreenshotL struct{}

var (
	userScreenshotAllColumns            = []string{"user_id", "education_year", "original_name", "file_name", "type"}
	userScreenshotColumnsWithoutDefault = []string{"user_id", "education_year", "original_name", "file_name", "type"}
	userScreenshotColumnsWithDefault    = []string{}
	userScreenshotPrimaryKeyColumns     = []string{"user_id", "education_year"}
	userScreenshotGeneratedColumns      = []string{}
)

type (
	// UserScreenshotSlice is an alias for a slice of pointers to UserScreenshot.
	// This should almost always be used instead of []UserScreenshot.
	UserScreenshotSlice []*UserScreenshot
	// UserScreenshotHook is the signature for custom UserScreenshot hook methods
	UserScreenshotHook func(context.Context, boil.ContextExecutor, *UserScreenshot) error

	userScreenshotQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userScreenshotType                 = reflect.TypeOf(&UserScreenshot{})
	userScreenshotMapping              = queries.MakeStructMapping(userScreenshotType)
	userScreenshotPrimaryKeyMapping, _ = queries.BindMapping(userScreenshotType, userScreenshotMapping, userScreenshotPrimaryKeyColumns)
	userScreenshotInsertCacheMut       sync.RWMutex
	userScreenshotInsertCache          = make(map[string]insertCache)
	userScreenshotUpdateCacheMut       sync.RWMutex
	userScreenshotUpdateCache          = make(map[string]updateCache)
	userScreenshotUpsertCacheMut       sync.RWMutex
	userScreenshotUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userScreenshotAfterSelectHooks []UserScreenshotHook

var userScreenshotBeforeInsertHooks []UserScreenshotHook
var userScreenshotAfterInsertHooks []UserScreenshotHook

var userScreenshotBeforeUpdateHooks []UserScreenshotHook
var userScreenshotAfterUpdateHooks []UserScreenshotHook

var userScreenshotBeforeDeleteHooks []UserScreenshotHook
var userScreenshotAfterDeleteHooks []UserScreenshotHook

var userScreenshotBeforeUpsertHooks []UserScreenshotHook
var userScreenshotAfterUpsertHooks []UserScreenshotHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserScreenshot) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userScreenshotAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserScreenshot) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userScreenshotBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserScreenshot) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userScreenshotAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserScreenshot) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userScreenshotBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserScreenshot) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userScreenshotAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserScreenshot) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userScreenshotBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserScreenshot) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userScreenshotAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserScreenshot) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userScreenshotBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserScreenshot) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userScreenshotAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserScreenshotHook registers your hook function for all future operations.
func AddUserScreenshotHook(hookPoint boil.HookPoint, userScreenshotHook UserScreenshotHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userScreenshotAfterSelectHooks = append(userScreenshotAfterSelectHooks, userScreenshotHook)
	case boil.BeforeInsertHook:
		userScreenshotBeforeInsertHooks = append(userScreenshotBeforeInsertHooks, userScreenshotHook)
	case boil.AfterInsertHook:
		userScreenshotAfterInsertHooks = append(userScreenshotAfterInsertHooks, userScreenshotHook)
	case boil.BeforeUpdateHook:
		userScreenshotBeforeUpdateHooks = append(userScreenshotBeforeUpdateHooks, userScreenshotHook)
	case boil.AfterUpdateHook:
		userScreenshotAfterUpdateHooks = append(userScreenshotAfterUpdateHooks, userScreenshotHook)
	case boil.BeforeDeleteHook:
		userScreenshotBeforeDeleteHooks = append(userScreenshotBeforeDeleteHooks, userScreenshotHook)
	case boil.AfterDeleteHook:
		userScreenshotAfterDeleteHooks = append(userScreenshotAfterDeleteHooks, userScreenshotHook)
	case boil.BeforeUpsertHook:
		userScreenshotBeforeUpsertHooks = append(userScreenshotBeforeUpsertHooks, userScreenshotHook)
	case boil.AfterUpsertHook:
		userScreenshotAfterUpsertHooks = append(userScreenshotAfterUpsertHooks, userScreenshotHook)
	}
}

// One returns a single userScreenshot record from the query.
func (q userScreenshotQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserScreenshot, error) {
	o := &UserScreenshot{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "tpportal: failed to execute a one query for user_screenshots")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserScreenshot records from the query.
func (q userScreenshotQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserScreenshotSlice, error) {
	var o []*UserScreenshot

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "tpportal: failed to assign all query results to UserScreenshot slice")
	}

	if len(userScreenshotAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserScreenshot records in the query.
func (q userScreenshotQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to count user_screenshots rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userScreenshotQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "tpportal: failed to check if user_screenshots exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UserScreenshot) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userScreenshotL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserScreenshot interface{}, mods queries.Applicator) error {
	var slice []*UserScreenshot
	var object *UserScreenshot

	if singular {
		var ok bool
		object, ok = maybeUserScreenshot.(*UserScreenshot)
		if !ok {
			object = new(UserScreenshot)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserScreenshot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserScreenshot))
			}
		}
	} else {
		s, ok := maybeUserScreenshot.(*[]*UserScreenshot)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserScreenshot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserScreenshot))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userScreenshotR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userScreenshotR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserScreenshots = append(foreign.R.UserScreenshots, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserScreenshots = append(foreign.R.UserScreenshots, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the userScreenshot to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserScreenshots.
func (o *UserScreenshot) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_screenshots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userScreenshotPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.EducationYear}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userScreenshotR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserScreenshots: UserScreenshotSlice{o},
		}
	} else {
		related.R.UserScreenshots = append(related.R.UserScreenshots, o)
	}

	return nil
}

// UserScreenshots retrieves all the records using an executor.
func UserScreenshots(mods ...qm.QueryMod) userScreenshotQuery {
	mods = append(mods, qm.From("\"user_screenshots\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_screenshots\".*"})
	}

	return userScreenshotQuery{q}
}

// FindUserScreenshot retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserScreenshot(ctx context.Context, exec boil.ContextExecutor, userID int64, educationYear int16, selectCols ...string) (*UserScreenshot, error) {
	userScreenshotObj := &UserScreenshot{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_screenshots\" where \"user_id\"=$1 AND \"education_year\"=$2", sel,
	)

	q := queries.Raw(query, userID, educationYear)

	err := q.Bind(ctx, exec, userScreenshotObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "tpportal: unable to select from user_screenshots")
	}

	if err = userScreenshotObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userScreenshotObj, err
	}

	return userScreenshotObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserScreenshot) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("tpportal: no user_screenshots provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userScreenshotColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userScreenshotInsertCacheMut.RLock()
	cache, cached := userScreenshotInsertCache[key]
	userScreenshotInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userScreenshotAllColumns,
			userScreenshotColumnsWithDefault,
			userScreenshotColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userScreenshotType, userScreenshotMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userScreenshotType, userScreenshotMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_screenshots\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_screenshots\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "tpportal: unable to insert into user_screenshots")
	}

	if !cached {
		userScreenshotInsertCacheMut.Lock()
		userScreenshotInsertCache[key] = cache
		userScreenshotInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserScreenshot.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserScreenshot) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userScreenshotUpdateCacheMut.RLock()
	cache, cached := userScreenshotUpdateCache[key]
	userScreenshotUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userScreenshotAllColumns,
			userScreenshotPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("tpportal: unable to update user_screenshots, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_screenshots\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userScreenshotPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userScreenshotType, userScreenshotMapping, append(wl, userScreenshotPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update user_screenshots row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by update for user_screenshots")
	}

	if !cached {
		userScreenshotUpdateCacheMut.Lock()
		userScreenshotUpdateCache[key] = cache
		userScreenshotUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userScreenshotQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update all for user_screenshots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to retrieve rows affected for user_screenshots")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserScreenshotSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("tpportal: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userScreenshotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_screenshots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userScreenshotPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to update all in userScreenshot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to retrieve rows affected all in update all userScreenshot")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserScreenshot) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("tpportal: no user_screenshots provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userScreenshotColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userScreenshotUpsertCacheMut.RLock()
	cache, cached := userScreenshotUpsertCache[key]
	userScreenshotUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userScreenshotAllColumns,
			userScreenshotColumnsWithDefault,
			userScreenshotColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userScreenshotAllColumns,
			userScreenshotPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("tpportal: unable to upsert user_screenshots, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userScreenshotPrimaryKeyColumns))
			copy(conflict, userScreenshotPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_screenshots\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userScreenshotType, userScreenshotMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userScreenshotType, userScreenshotMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "tpportal: unable to upsert user_screenshots")
	}

	if !cached {
		userScreenshotUpsertCacheMut.Lock()
		userScreenshotUpsertCache[key] = cache
		userScreenshotUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserScreenshot record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserScreenshot) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("tpportal: no UserScreenshot provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userScreenshotPrimaryKeyMapping)
	sql := "DELETE FROM \"user_screenshots\" WHERE \"user_id\"=$1 AND \"education_year\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete from user_screenshots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by delete for user_screenshots")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userScreenshotQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("tpportal: no userScreenshotQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete all from user_screenshots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by deleteall for user_screenshots")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserScreenshotSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userScreenshotBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userScreenshotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_screenshots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userScreenshotPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: unable to delete all from userScreenshot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tpportal: failed to get rows affected by deleteall for user_screenshots")
	}

	if len(userScreenshotAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserScreenshot) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserScreenshot(ctx, exec, o.UserID, o.EducationYear)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserScreenshotSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserScreenshotSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userScreenshotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_screenshots\".* FROM \"user_screenshots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userScreenshotPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "tpportal: unable to reload all in UserScreenshotSlice")
	}

	*o = slice

	return nil
}

// UserScreenshotExists checks if the UserScreenshot row exists.
func UserScreenshotExists(ctx context.Context, exec boil.ContextExecutor, userID int64, educationYear int16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_screenshots\" where \"user_id\"=$1 AND \"education_year\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, educationYear)
	}
	row := exec.QueryRowContext(ctx, sql, userID, educationYear)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "tpportal: unable to check if user_screenshots exists")
	}

	return exists, nil
}

// Exists checks if the UserScreenshot row exists.
func (o *UserScreenshot) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserScreenshotExists(ctx, exec, o.UserID, o.EducationYear)
}
